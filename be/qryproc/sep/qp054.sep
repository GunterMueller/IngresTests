/*
        Test Name    : eea10.sep
        User Name    : testenv
        Test ID      : eea10
        Module       : 
        Filename     : eea10.sep
        Purpose      : Test read-only cursors with complex target lists.
                       Uses an MQT.
        Input Files  : none
        Output Files : none
        Database     : SEPPARAMDB
        Tables       : emp, empchar, dept, bldg, bldgvarchar, allt
        Synopsis     : Start transaction. Do a bunch of retrieve queries
			with complex target lists by cursors. End 
			transaction.
	History	     : written into a sep test 7/91 by Troy Camacho from
                       original equel test:
                                tst_qatest:[equel.eqfunc.src]rf002a.qc
                       synonymous to eea02.sep.
		
           4-Mar-1994	(Author)
	   7-MAR-1997	(vissu01) Modified for NT
	   25-March-1999  (kamra01) modified VPG_SZ to 8192
*/
? cp @file(ing_tst,be,qryproc,data,allt.dat) allt.dat 
<<
>>
? fill eea10a.dat 
!!
    6Aitken	  50000.000	    5sales	    2NE	    8Verducci	   1112-mar-1947	     2

    7Cameron	  35000.000	    8tech sup	    2SE	    6Shigio	   1115-aug-1960	     0

    5Clark	  40000.000	    5sales	    2NC	    8Verducci	   1118-nov-1949	     1

    5Curan	  30000.000	    8tech sup	    2NW	    6Shigio	   1120-aug-1959	     0

    5Curry	  32000.000	    8tech sup	    2NW	    6Shigio	   1130-nov-1955	     3

    6Gordon	  27000.000	    8tech sup	    2NC	    6Shigio	   1123-may-1963	     0

    5Green	  26000.000	    6market	    2NW	    7McTigue	   1119-dec-1961	     0

    7Gregori	  31000.000	    5sales	    2NW	    8Verducci	   1121-oct-1949	     2

    8Kreseski	  24000.000	    8tech sup	    2NC	    6Shigio	   1111-sep-1955	     0

    6Mandic	  43000.000	    5sales	    2SE	    8Verducci	   1110-jul-1964	     0

    7McTigue	  41000.000	    5sales	    2NW	    8Verducci	   11 9-apr-1953	     1

    4Ming	  22000.000	    8tech sup	    2SE	    6Shigio	   11 4-may-1956	     1

    5Ramos	  30000.000	    8tech sup	    2NW	    6Shigio	   1121-jan-1941	     0

    8Robinson	  80000.000	    5sales	    2NE	    8Verducci	   1120-nov-1952	     1

    5Sabel	  21000.000	    8tech sup	    2SE	    6Shigio	   11 8-jan-1958	     0

    6Saxena	  22000.000	    8tech sup	    2NC	    6Shigio	   11 8-may-1950	     0

    6Shigio	  28000.000	    5sales	    2SE	    8Verducci	   11 9-jul-1948	     3

    8Stannich	  33000.000	    6market	    2NW	    7McTigue	   1113-dec-1961	     0

    5Stein	  40000.000	    5sales	    2NE	    8Verducci	   1125-dec-1952	     1

    8Sullivan	  35000.000	    8tech sup	    2NW	    6Shigio	   1110-oct-1960	     1

    8Verducci	  55000.000	    5admin	    2NW	    0	   1125-dec-1958	     2

    9Zimmerman	  25000.000	    8tech sup	    2NE	    6Shigio	   1128-aug-1962	     0

    7DiTallo	  65000.000	    8Contract	    3unk	    8Robinson	   1102-sep-1955	     -
0

    7Herbert	  35000.000	    7banking	    0	    9Emprinham	   1117-mar-1945	     0

!!
? fill eea10b.dat 
!!
admin   NW                 0.00C  2     4
market  NW              9200.00A  1     2
sales   NC            120000.00A  2     1
sales   NE                 0.00D 18     4
sales   NW            200000.00A  2     1
sales   SC             95000.00E  1     1
sales   SE            175000.00D 18     1
tech supNC              5000.00C  2     3
tech supNE             20000.00D 17     2
tech supNW                 0.00B  1     1
tech supSE                 0.00D 19     1
!!
? fill eea10c.dat 
!!
    1A	   191000 University Ave	    8Berkeley	    2CA	    594000

    1B	   171800 Shattuck Ave	    8Berkeley	    2CA	    594100

    1C	   19900 Lake Shore Blvd	    7Chicago	    2IL	    560080

    1D	   2224130 Pennsylvania Ave	   10Washington	    2DC	    520198

    1E	   1842318 Woodsay Blvd	    7Houston	    2TX	    577009

    1F	   111585 Eye St	   10Washington	    2DC	    520199

!!
? fill eea10.qc 
!!
#include <stdio.h>
/***************/
/*    EEA10    */
/***************/

main(argc, argv)
##      int argc;
##      char **argv;

{
	/* Declarations for EMP basis table */
##	char	ename[11];
##	int	esalary;	/* Really money but no decimal places */
##	char	edept[9];
##	char	ediv[4];
##	char	emgr[11];
##	char	ebirthdate[26];
##	short	enum_dep;
	/* Declarations for DEPT basis table */
##	char	ddname[9];
##	char	ddiv[4];
##	int	dsales;		/* Really money but no decimal places */
##	char	dbldg[3];
##	short	dfloor;
##	short	dnum_emp;
	/* Declarations for BLDG basis table */
##	char	bbldg[3];
##	char	bst_adr[31];
##	char	bcity[16];
##	char	bstate[3];
##	char	bzip[6];
	/* Declarations for ALLT basis table */
##	short	ai1;
##	short	ai2;
##	int	ai4;
##	float	af4;
##	double	af8;
##	float	amoney;
##	char	adate[26];
##	char	ac62[62];
	/* Useful vars */
##	int	done;		/* to signal end of cursor */
##	int	err;		/* Error number */
	/* Utility variables/clauses */
##	char	*varaddr[3];
##	char	varlist[50];
##	char	*C_NC = "NC";
##	float	floatvar;	/*  4-bytes  */
##	float	point_5 = 0.50;
##	char	astring10[10];
##	char	astring21[21];
##	char	*is_tech_sup = "tech sup";
##	char	*not_date = "I AM NOT A DATE";
##	int	countvar;
##	int	countvar2;
##	int	countvar3;
##	int	percent;
##	char	mname[11];
##	char	*empty_where = "   ";
##	double	money_f;	/* Non-generic */
##	char	money_str[20];

printf("\n***************\n");
printf("*    EEA10    *\n");
printf("***************\n\n");

printf("connecting with database...\n");
##	ingres argv[1];

	/*  qualification with program variable  */
##	RANGE OF e IS emp
##	DECLARE CURSOR c1 FOR
##		RETRIEVE (e.name, e.mgr)
##		WHERE e.div = C_NC

	/*  with string function and aggregate  */
##	RANGE OF d IS dept
##	DECLARE CURSOR c2 FOR
##		RETRIEVE ( a = LOWERCASE(d.dname),
##			   b = COUNT(d.dname by d.dname))

	/*  with string and nested functions  */
##	RANGE OF e IS emp
##	DECLARE CURSOR c3 FOR
##		RETRIEVE (a = TRIM(e.name),
##			  b = CONCAT(LEFT(e.name,3),UPPERCASE(e.name)),
##			  c = FLOAT4(LENGTH(e.name)))

	/*  same as above, retrieveing from table with CHAR fields  */
##	RANGE OF ec IS empchar
##	DECLARE CURSOR c4 FOR
##		RETRIEVE (a = TRIM(ec.name),
##			  b = CONCAT(LEFT(ec.name,3),UPPERCASE(ec.name)),
##			  c = FLOAT4(LENGTH(ec.name)))

	/*  same as above two cursors, but will have PARAM retrieve  */
##	RANGE OF e IS emp
##	DECLARE CURSOR c5 FOR
##		RETRIEVE (a = TRIM(e.name),
##			  b = CONCAT(LEFT(e.name,3),UPPERCASE(e.name)),
##			  c = FLOAT4(LENGTH(e.name)))

	/*  uses string functions and aggregates  */
##	RANGE OF d IS dept
##	DECLARE CURSOR c6 FOR
##		RETRIEVE UNIQUE (a = RIGHT(d.dname,10),
##				 b = d.div,
##				 c = ASCII(d.floor),
##				 d = d.num_emp,
##				 e = SUM(d.num_emp by d.div),
##				 f = AVG(SUM(d.num_emp by d.div) BY d.dname))

	/*  more string functions  */
##	RANGE OF b IS bldg
##	DECLARE CURSOR c7 FOR
##		RETRIEVE (a = b.st_adr,
##			  b = SIZE(b.st_adr),
##			  c = LENGTH(SQUEEZE(b.st_adr)),
##			  d = LENGTH(PAD(b.st_adr)),
##			  e = #CHAR(b.city))

	/*  same as above using a VARCHAR table  */
##	RANGE OF bv IS bldgvarchar
##	DECLARE CURSOR c8 FOR
##		RETRIEVE (a = bv.st_adr,
##			  b = SIZE(bv.st_adr),
##			  c = LENGTH(SQUEEZE(bv.st_adr)),
##			  d = LENGTH(PAD(bv.st_adr)),
##			  e = #CHAR(bv.city))

	/*  uses string functions  */
##	RANGE OF e IS emp
##	DECLARE CURSOR c9 FOR
##		RETRIEVE (a = TRIM(e.name),
##			  b = DOW(DATE(e.birthdate)),
##			  c = SQUEEZE(TEXT("  foo\n  foo")))
##		WHERE TRIM(C_NC) = e.div

	/*  nested string functions  */
##	RANGE OF a IS allt
##	DECLARE CURSOR c10 FOR
##		RETRIEVE (a = a.i2,
##			  b = LEFT(a.char61,
##			      LOCATE(TEXT(a.char61),RIGHT(TEXT(a.i2),1))))
##		WHERE a.i2 >= 100 and a.i2 <= 200
##		SORT BY a.i2

	/*  GENERIC RERIEVE BEGIN  */

	printf( "EQUEL RETRIEVE Test\n\n" );
	printf( "Complex RETRIEVEs\n" );

##	BEGIN TRANSACTION

	printf( "(1) EMP(name, mgr) where div=NC in var\n" );
	done = 0;
	err  = 0;
##	OPEN CURSOR c1
##	INQUIRE_EQUEL (err = errorno)
	while (!done && !err)
		{
##		RETRIEVE CURSOR c1 (ename, emgr)
##		INQUIRE_EQUEL (done = endquery, err = errorno)
		if (!done && !err)
			printf( "%-11.11s, %-11.11s\n", ename, emgr );
		}
	if (err) printf( "Error = %d\n", err );
	err  = 0;
##	CLOSE CURSOR c1
##	INQUIRE_EQUEL (err = errorno)
	if (err) printf( "Error closing c1 = %d\n", err );

	printf( "\n(2) DEPT(LOWERCASE(dname),COUNT(dname by dname))\n" );
	done = 0;
	err  = 0;
##	OPEN CURSOR c2
##	INQUIRE_EQUEL (err = errorno)
	while (!done && !err)
		{
##		RETRIEVE CURSOR c2 (ddname, countvar)
##		INQUIRE_EQUEL (done = endquery, err = errorno);
		if (!done && !err)
			printf( "%-9.9s, %-5d\n", ddname, countvar );
		}
	if (err) printf( "Error = %d\n", err );
	err  = 0;
##	CLOSE CURSOR c2
##	INQUIRE_EQUEL (err = errorno)
	if (err) printf( "Error closing c2 = %d\n", err );

	printf( "\n(3) EMP(TRIM(name)," );
	printf( " CONCAT(LEFT(name,3),UPPERCASE(name))," );
	printf( " FLOAT4(LENGTH(name))) \n" );
	done = 0;
	err  = 0;
##	OPEN CURSOR c3
##	INQUIRE_EQUEL (err = errorno)
	while (!done && !err)
		{
##		RETRIEVE CURSOR c3 (ename, astring21, floatvar)
##		INQUIRE_EQUEL (done = endquery, err = errorno);
		if (!done && !err)
			printf( "%-11s, %-21s, %-10.3f\n",
				ename, astring21, floatvar );
		}
	if (err) printf( "Error = %d\n", err );
	err  = 0;
##	CLOSE CURSOR c3
##	INQUIRE_EQUEL (err = errorno)
	if (err) printf( "Error closing c3 = %d\n", err );

	/*  Results should be same as previous query  */
	printf( "\n(4) EMPCHAR(TRIM(name)," );
	printf( " CONCAT(LEFT(name,3),UPPERCASE(name))," );
	printf( " FLOAT4(LENGTH(name))) \n" );
	done = 0;
	err  = 0;
##	OPEN CURSOR c4
##	INQUIRE_EQUEL (err = errorno)
	while (!done && !err)
		{
##		RETRIEVE CURSOR c4 (ename, astring21, floatvar)
##		INQUIRE_EQUEL (done = endquery, err = errorno);
		if (!done && !err)
			printf( "%-11s, %-21s, %-10.3f\n",
				ename, astring21, floatvar );
		}
	if (err) printf( "Error = %d\n", err );
	err  = 0;
##	CLOSE CURSOR c4
##	INQUIRE_EQUEL (err = errorno)
	if (err) printf( "Error closing c4 = %d\n", err );

	printf( "\n(5) EMP(TRIM(name)," );
	printf( " CONCAT(LEFT(name,3),UPPERCASE(name))," );
	printf( " FLOAT4(LENGTH(name))) via param\n" );
	varaddr[0] = ename;
	varaddr[1] = astring21;
	varaddr[2] = (char *) &floatvar;
	strcpy(varlist,"%c, %c, %f4");
	done = 0;
	err  = 0;
##	OPEN CURSOR c5
##	INQUIRE_EQUEL (err = errorno)
	while (!done && !err)
		{
##		RETRIEVE CURSOR c5 ( PARAM(varlist,varaddr) )
##		INQUIRE_EQUEL (done = endquery, err = errorno) ;
		if (!done && !err)
			printf( "%-11s, %-21s, %-10.3f\n",
				ename, astring21, floatvar );
		}
	if (err) printf( "Error = %d\n", err );
	err  = 0;
##	CLOSE CURSOR c5
##	INQUIRE_EQUEL (err = errorno)
	if (err) printf( "Error closing c5 = %d\n", err );

	printf( "\n(6) DEPT with string functions and aggs\n" );
	done = 0;
	err  = 0;
##	OPEN CURSOR c6
##	INQUIRE_EQUEL (err = errorno)
	while (!done && !err)
		{
##		RETRIEVE CURSOR c6 (ddname,ddiv,astring10,dnum_emp,
##				    countvar,floatvar)
##		INQUIRE_EQUEL (done = endquery, err = errorno);
		if (!done && !err)
			printf("%-9s,%-4s,%-10s,%3d,%3d,%-10.3f\n",ddname,
			       ddiv,astring10,dnum_emp,countvar,floatvar);
		}
	if (err) printf( "Error = %d\n", err );
	err  = 0;
##	CLOSE CURSOR c6
##	INQUIRE_EQUEL (err = errorno)
	if (err) printf( "Error closing c6 = %d\n", err );

	printf( "\n(7) BLDG with more string functions \n" );
	done = 0;
	err  = 0;
##	OPEN CURSOR c7
##	INQUIRE_EQUEL (err = errorno)
	while (!done && !err)
		{
##		RETRIEVE CURSOR c7 (bst_adr,countvar,countvar2,countvar3,bcity)
##		INQUIRE_EQUEL (done = endquery, err = errorno);
		if (!done && !err)
			printf( "%-31s,%-5d, %-5d, %-5d, %-16s\n", 
				bst_adr,countvar,countvar2,countvar3,bcity );
		}
	if (err) printf( "Error = %d\n", err );
	err  = 0;
##	CLOSE CURSOR c7
##	INQUIRE_EQUEL (err = errorno)
	if (err) printf( "Error closing c7 = %d\n", err );

	printf( "\n(8) BLDGVARCHAR with more string functions \n" );
	done = 0;
	err  = 0;
##	OPEN CURSOR c8
##	INQUIRE_EQUEL (err = errorno)
	while (!done && !err)
		{
##		RETRIEVE CURSOR c8 (bst_adr,countvar,countvar2,countvar3,bcity)
##		INQUIRE_EQUEL (done = endquery, err = errorno);
		if (!done && !err)
			printf( "%-31s,%-5d, %-5d, %-5d, %-16s\n", 
				bst_adr,countvar,countvar2,countvar3,bcity );
		}
	if (err) printf( "Error = %d\n", err );
	err  = 0;
##	CLOSE CURSOR c8
##	INQUIRE_EQUEL (err = errorno)
	if (err) printf( "Error closing c8 = %d\n", err );

	printf( "\n(9) EMP with string functions\n" );
	done = 0;
	err  = 0;
##	OPEN CURSOR c9
##	INQUIRE_EQUEL (err = errorno)
	while (!done && !err)
		{
##		RETRIEVE CURSOR c9 (ename,ebirthdate,astring10)
##		INQUIRE_EQUEL (done = endquery, err = errorno);
		if (!done && !err)
			printf( "%-11s, %-26s, %-11s \n",
				ename, ebirthdate, astring10 );
		}
	if (err) printf( "Error = %d\n", err );
	err  = 0;
##	CLOSE CURSOR c9
##	INQUIRE_EQUEL (err = errorno)
	if (err) printf( "Error closing c9 = %d\n", err );

	printf( "\n(10) ALLT with nested string functions \n" );
	done = 0;
	err  = 0;
##	OPEN CURSOR c10
##	INQUIRE_EQUEL (err = errorno)
	while (!done && !err)
		{
##		RETRIEVE CURSOR c10 (ai2, ac62)
##		INQUIRE_EQUEL (done = endquery, err = errorno);
		if (!done && !err)
			printf( "%-5d, %-62s\n", ai2, ac62);
		}
	if (err) printf( "Error = %d\n", err );
	err  = 0;
##	CLOSE CURSOR c10
##	INQUIRE_EQUEL (err = errorno)
	if (err) printf( "Error closing c10 = %d\n", err );

##	END TRANSACTION
##	EXIT
	printf( "\n===END OF TEST RUN===\n" );

	exit(0);	
}
!!
? sql -s SEPPARAMDB 
<<
>>
* drop emp\g
<<
~
>>
* drop empchar\g
<<
~
>>
* drop dept\g
<<
~
>>
* drop bldg\g
<<
~
>>
* drop bldgvarchar\g
<<
~
>>
* drop allt\g 
<<
~
>>
*	create table emp(
<<
>>
*	name c10 not null with default,
<<
>>
*	salary float not null with default,
<<
>>
*	dept c8 not null with default,
<<
>>
*	div c3 not null with default,
<<
>>
*	mgr c10 not null with default,
<<
>>
*	birthdate c25 not null with default,
<<
>>
*	num_dep smallint not null with default)
<<
>>
*	with noduplicates, page_size=8192\g
<<
>>
*	copy emp(
<<
>>
*	name= varchar(0)tab,
<<
>>
*	salary= c0tab,
<<
>>
*	dept= varchar(0)tab,
<<
>>
*	div= varchar(0)tab,
<<
>>
*	mgr= varchar(0)tab,
<<
>>
*	birthdate= varchar(0)tab,
<<
>>
*	num_dep= c0nl, nl= d1)
<<
>>
*	from 'eea10a.dat'\g
<<
(24 rows)
>>
*       create table empchar(
<<
>>
*       name char(10) not null with default,
<<
>>
*       salary float not null with default,
<<
>>
*       dept char(8) not null with default,
<<
>>
*       div char(3) not null with default,
<<
>>
*       mgr char(10) not null with default,
<<
>>
*       birthdate char(25) not null with default,
<<
>>
*       num_dep smallint not null with default)
<<
>>
*       with noduplicates, page_size=8192\g
<<
>>
*       copy empchar(
<<
>>
*       name= varchar(0)tab,
<<
>>
*       salary= c0tab,
<<
>>
*       dept= varchar(0)tab,
<<
>>
*       div= varchar(0)tab,
<<
>>
*       mgr= varchar(0)tab,
<<
>>
*       birthdate= varchar(0)tab,
<<
>>
*       num_dep= c0nl, nl= d1)
<<
>>
*       from 'eea10a.dat'\g
<<
(24 rows)
>>
* create table dept ( dname c8, div c3, sales f8, bldg c2,
<<
>>
*		floor  i1, num_emp i2)with page_size=8192\g
<<
>>
* copy dept (	dname = c8, div = c3, sales = c20, bldg = c2,
<<
>>
*		floor = c2, num_emp = c0nl)	
<<
>>
*		from 'eea10b.dat'\g
<<
(11 rows)
>>
* create table allt(
<<
>>
*	i1 i1 not null with default, i2 smallint not null with default,
<<
>>
*	i4 integer not null with default, f4 f4 not null with default,
<<
>>
*	f8 float not null with default,	money money not null with default,
<<
>>
*	date date not null with default, char61 c61 not null with default)
<<
>>
*	with noduplicates, page_size=8192\g
<<
>>
*	copy allt(
<<
>>
*	i1= c0tab, i2= c0tab, i4= c0tab, f4= c0tab, f8= c0tab, money= c0tab,
<<
>>
*	date= c0tab,char61= varchar(0)nl,nl= d1)
<<
>>
*	from 'allt.dat' \g
<<
(10000 rows)
>>
* modify allt to isam on i2 with fillfactor = 80, page_size=8192  \g
<<
(10000 rows)
>>
* create table bldg( bldg c2 not null with default,
<<
>>
*	st_adr c30 not null with default, city c15 not null with default,
<<
>>
*	state c2 not null with default, zip c5 not null with default)
<<
>>
*	with noduplicates, page_size=8192\g
<<
>>
* copy bldg (bldg= varchar(0)tab,
<<
>>
*	st_adr= varchar(0)tab, city= varchar(0)tab,
<<
>>
*	state= varchar(0)tab, zip= varchar(0)nl, nl= d1)
<<
>>
*	from 'eea10c.dat'\g
<<
(6 rows)
>>
* create table bldgvarchar( bldg varchar(2) not null with default,
<<
>>
*       st_adr varchar(30) not null with default, 
<<
>>
*	city varchar(15) not null with default,
<<
>>
*       state varchar(2) not null with default, 
<<
>>
*	zip varchar(5) not null with default)
<<
>>
*       with noduplicates, page_size=8192\g
<<
>>
* copy bldgvarchar (bldg= varchar(0)tab,
<<
>>
*       st_adr= varchar(0)tab, city= varchar(0)tab,
<<
>>
*       state= varchar(0)tab, zip= varchar(0)nl, nl= d1)
<<
>>
*       from 'eea10c.dat'\g
<<
(6 rows)
>>
* commit\g
<<
>>
* \q
<<
>>
? sepesqlc eea10.qc 
<<
EQUEL eea10.qc:
>>
? sepcc eea10.c 
<<
>>
<< IF (NT_GENERIC)
eea10.c
>>
? seplnk eea10 
<<
>>
? run eea10.exe SEPPARAMDB 
<<

***************
*    EEA10    *
***************

connecting with database...
EQUEL RETRIEVE Test

Complex RETRIEVEs
(1) EMP(name, mgr) where div=NC in var
Clark      , Verducci   
Gordon     , Shigio     
Kreseski   , Shigio     
Saxena     , Shigio     

(2) DEPT(LOWERCASE(dname),COUNT(dname by dname))
admin    , 1    
market   , 1    
sales    , 5    
tech sup , 4    

(3) EMP(TRIM(name), CONCAT(LEFT(name,3),UPPERCASE(name)), FLOAT4(LENGTH(name))) 
Aitken     , AitAITKEN            , 6.000     
Cameron    , CamCAMERON           , 7.000     
Clark      , ClaCLARK             , 5.000     
Curan      , CurCURAN             , 5.000     
Curry      , CurCURRY             , 5.000     
Gordon     , GorGORDON            , 6.000     
Green      , GreGREEN             , 5.000     
Gregori    , GreGREGORI           , 7.000     
Kreseski   , KreKRESESKI          , 8.000     
Mandic     , ManMANDIC            , 6.000     
McTigue    , McTMCTIGUE           , 7.000     
Ming       , MinMING              , 4.000     
Ramos      , RamRAMOS             , 5.000     
Robinson   , RobROBINSON          , 8.000     
Sabel      , SabSABEL             , 5.000     
Saxena     , SaxSAXENA            , 6.000     
Shigio     , ShiSHIGIO            , 6.000     
Stannich   , StaSTANNICH          , 8.000     
Stein      , SteSTEIN             , 5.000     
Sullivan   , SulSULLIVAN          , 8.000     
Verducci   , VerVERDUCCI          , 8.000     
Zimmerman  , ZimZIMMERMAN         , 9.000     
DiTallo    , DiTDITALLO           , 7.000     
Herbert    , HerHERBERT           , 7.000     

(4) EMPCHAR(TRIM(name), CONCAT(LEFT(name,3),UPPERCASE(name)), FLOAT4(LENGTH(name))) 
Aitken     , Ait       AITKEN     , 6.000     
Cameron    , Cam       CAMERON    , 7.000     
Clark      , Cla       CLARK      , 5.000     
Curan      , Cur       CURAN      , 5.000     
Curry      , Cur       CURRY      , 5.000     
Gordon     , Gor       GORDON     , 6.000     
Green      , Gre       GREEN      , 5.000     
Gregori    , Gre       GREGORI    , 7.000     
Kreseski   , Kre       KRESESKI   , 8.000     
Mandic     , Man       MANDIC     , 6.000     
McTigue    , McT       MCTIGUE    , 7.000     
Ming       , Min       MING       , 4.000     
Ramos      , Ram       RAMOS      , 5.000     
Robinson   , Rob       ROBINSON   , 8.000     
Sabel      , Sab       SABEL      , 5.000     
Saxena     , Sax       SAXENA     , 6.000     
Shigio     , Shi       SHIGIO     , 6.000     
Stannich   , Sta       STANNICH   , 8.000     
Stein      , Ste       STEIN      , 5.000     
Sullivan   , Sul       SULLIVAN   , 8.000     
Verducci   , Ver       VERDUCCI   , 8.000     
Zimmerman  , Zim       ZIMMERMAN  , 9.000     
DiTallo    , DiT       DITALLO    , 7.000     
Herbert    , Her       HERBERT    , 7.000     

(5) EMP(TRIM(name), CONCAT(LEFT(name,3),UPPERCASE(name)), FLOAT4(LENGTH(name))) via -
param
Aitken     , AitAITKEN            , 6.000     
Cameron    , CamCAMERON           , 7.000     
Clark      , ClaCLARK             , 5.000     
Curan      , CurCURAN             , 5.000     
Curry      , CurCURRY             , 5.000     
Gordon     , GorGORDON            , 6.000     
Green      , GreGREEN             , 5.000     
Gregori    , GreGREGORI           , 7.000     
Kreseski   , KreKRESESKI          , 8.000     
Mandic     , ManMANDIC            , 6.000     
McTigue    , McTMCTIGUE           , 7.000     
Ming       , MinMING              , 4.000     
Ramos      , RamRAMOS             , 5.000     
Robinson   , RobROBINSON          , 8.000     
Sabel      , SabSABEL             , 5.000     
Saxena     , SaxSAXENA            , 6.000     
Shigio     , ShiSHIGIO            , 6.000     
Stannich   , StaSTANNICH          , 8.000     
Stein      , SteSTEIN             , 5.000     
Sullivan   , SulSULLIVAN          , 8.000     
Verducci   , VerVERDUCCI          , 8.000     
Zimmerman  , ZimZIMMERMAN         , 9.000     
DiTallo    , DiTDITALLO           , 7.000     
Herbert    , HerHERBERT           , 7.000     

(6) DEPT with string functions and aggs
admin    ,NW  ,2         ,  4,  8,8.000     
market   ,NW  ,1         ,  2,  8,8.000     
sales    ,NC  ,2         ,  1,  4,4.200     
sales    ,NE  ,18        ,  4,  6,4.200     
sales    ,NW  ,2         ,  1,  8,4.200     
sales    ,SC  ,1         ,  1,  1,4.200     
sales    ,SE  ,18        ,  1,  2,4.200     
tech sup ,NC  ,2         ,  3,  4,5.000     
tech sup ,NE  ,17        ,  2,  6,5.000     
tech sup ,NW  ,1         ,  1,  8,5.000     
tech sup ,SE  ,19        ,  1,  2,5.000     

(7) BLDG with more string functions 
1000 University Ave            ,30   , 19   , 30   , Berkeley        
1800 Shattuck Ave              ,30   , 17   , 30   , Berkeley        
900 Lake Shore Blvd            ,30   , 19   , 30   , Chicago         
24130 Pennsylvania Ave         ,30   , 22   , 30   , Washington      
42318 Woodsay Blvd             ,30   , 18   , 30   , Houston         
1585 Eye St                    ,30   , 11   , 30   , Washington      

(8) BLDGVARCHAR with more string functions 
1000 University Ave            ,30   , 19   , 30   , Berkeley        
1800 Shattuck Ave              ,30   , 17   , 30   , Berkeley        
900 Lake Shore Blvd            ,30   , 19   , 30   , Chicago         
24130 Pennsylvania Ave         ,30   , 22   , 30   , Washington      
42318 Woodsay Blvd             ,30   , 18   , 30   , Houston         
1585 Eye St                    ,30   , 11   , 30   , Washington      

(9) EMP with string functions
Clark      , Fri                       , foo foo     
Gordon     , Thu                       , foo foo     
Kreseski   , Sun                       , foo foo     
Saxena     , Mon                       , foo foo     

(10) ALLT with nested string functions 
100  , aaaaaaa0                                                      
101  , aaaaaaa0bbbbbbb1                                              
102  , aaaaaaa0bbbbbbb1ccccccc0ddddddd2                              
103  , aaaaaaa0bbbbbbb1ccccccc0ddddddd3                              
104  , aaaaaaa0bbbbbbb1ccccccc0ddddddd4                              
105  , aaaaaaa0bbbbbbb1ccccccc0ddddddd5                              
106  , aaaaaaa0bbbbbbb1ccccccc0ddddddd6                              
107  , aaaaaaa0bbbbbbb1ccccccc0ddddddd7                              
108  , aaaaaaa0bbbbbbb1ccccccc0ddddddd8                              
109  , aaaaaaa0bbbbbbb1ccccccc0ddddddd9                              
110  , aaaaaaa0                                                      
111  , aaaaaaa0bbbbbbb1                                              
112  , aaaaaaa0bbbbbbb1ccccccc1ddddddd2                              
113  , aaaaaaa0bbbbbbb1ccccccc1ddddddd3                              
114  , aaaaaaa0bbbbbbb1ccccccc1ddddddd4                              
115  , aaaaaaa0bbbbbbb1ccccccc1ddddddd5                              
116  , aaaaaaa0bbbbbbb1ccccccc1ddddddd6                              
117  , aaaaaaa0bbbbbbb1ccccccc1ddddddd7                              
118  , aaaaaaa0bbbbbbb1ccccccc1ddddddd8                              
119  , aaaaaaa0bbbbbbb1ccccccc1ddddddd9                              
120  , aaaaaaa0                                                      
121  , aaaaaaa0bbbbbbb1                                              
122  , aaaaaaa0bbbbbbb1ccccccc2                                      
123  , aaaaaaa0bbbbbbb1ccccccc2ddddddd3                              
124  , aaaaaaa0bbbbbbb1ccccccc2ddddddd4                              
125  , aaaaaaa0bbbbbbb1ccccccc2ddddddd5                              
126  , aaaaaaa0bbbbbbb1ccccccc2ddddddd6                              
127  , aaaaaaa0bbbbbbb1ccccccc2ddddddd7                              
128  , aaaaaaa0bbbbbbb1ccccccc2ddddddd8                              
129  , aaaaaaa0bbbbbbb1ccccccc2ddddddd9                              
130  , aaaaaaa0                                                      
131  , aaaaaaa0bbbbbbb1                                              
132  , aaaaaaa0bbbbbbb1ccccccc3ddddddd2                              
133  , aaaaaaa0bbbbbbb1ccccccc3                                      
134  , aaaaaaa0bbbbbbb1ccccccc3ddddddd4                              
135  , aaaaaaa0bbbbbbb1ccccccc3ddddddd5                              
136  , aaaaaaa0bbbbbbb1ccccccc3ddddddd6                              
137  , aaaaaaa0bbbbbbb1ccccccc3ddddddd7                              
138  , aaaaaaa0bbbbbbb1ccccccc3ddddddd8                              
139  , aaaaaaa0bbbbbbb1ccccccc3ddddddd9                              
140  , aaaaaaa0                                                      
141  , aaaaaaa0bbbbbbb1                                              
142  , aaaaaaa0bbbbbbb1ccccccc4ddddddd2                              
143  , aaaaaaa0bbbbbbb1ccccccc4ddddddd3                              
144  , aaaaaaa0bbbbbbb1ccccccc4                                      
145  , aaaaaaa0bbbbbbb1ccccccc4ddddddd5                              
146  , aaaaaaa0bbbbbbb1ccccccc4ddddddd6                              
147  , aaaaaaa0bbbbbbb1ccccccc4ddddddd7                              
148  , aaaaaaa0bbbbbbb1ccccccc4ddddddd8                              
149  , aaaaaaa0bbbbbbb1ccccccc4ddddddd9                              
150  , aaaaaaa0                                                      
151  , aaaaaaa0bbbbbbb1                                              
152  , aaaaaaa0bbbbbbb1ccccccc5ddddddd2                              
153  , aaaaaaa0bbbbbbb1ccccccc5ddddddd3                              
154  , aaaaaaa0bbbbbbb1ccccccc5ddddddd4                              
155  , aaaaaaa0bbbbbbb1ccccccc5                                      
156  , aaaaaaa0bbbbbbb1ccccccc5ddddddd6                              
157  , aaaaaaa0bbbbbbb1ccccccc5ddddddd7                              
158  , aaaaaaa0bbbbbbb1ccccccc5ddddddd8                              
159  , aaaaaaa0bbbbbbb1ccccccc5ddddddd9                              
160  , aaaaaaa0                                                      
161  , aaaaaaa0bbbbbbb1                                              
162  , aaaaaaa0bbbbbbb1ccccccc6ddddddd2                              
163  , aaaaaaa0bbbbbbb1ccccccc6ddddddd3                              
164  , aaaaaaa0bbbbbbb1ccccccc6ddddddd4                              
165  , aaaaaaa0bbbbbbb1ccccccc6ddddddd5                              
166  , aaaaaaa0bbbbbbb1ccccccc6                                      
167  , aaaaaaa0bbbbbbb1ccccccc6ddddddd7                              
168  , aaaaaaa0bbbbbbb1ccccccc6ddddddd8                              
169  , aaaaaaa0bbbbbbb1ccccccc6ddddddd9                              
170  , aaaaaaa0                                                      
171  , aaaaaaa0bbbbbbb1                                              
172  , aaaaaaa0bbbbbbb1ccccccc7ddddddd2                              
173  , aaaaaaa0bbbbbbb1ccccccc7ddddddd3                              
174  , aaaaaaa0bbbbbbb1ccccccc7ddddddd4                              
175  , aaaaaaa0bbbbbbb1ccccccc7ddddddd5                              
176  , aaaaaaa0bbbbbbb1ccccccc7ddddddd6                              
177  , aaaaaaa0bbbbbbb1ccccccc7                                      
178  , aaaaaaa0bbbbbbb1ccccccc7ddddddd8                              
179  , aaaaaaa0bbbbbbb1ccccccc7ddddddd9                              
180  , aaaaaaa0                                                      
181  , aaaaaaa0bbbbbbb1                                              
182  , aaaaaaa0bbbbbbb1ccccccc8ddddddd2                              
183  , aaaaaaa0bbbbbbb1ccccccc8ddddddd3                              
184  , aaaaaaa0bbbbbbb1ccccccc8ddddddd4                              
185  , aaaaaaa0bbbbbbb1ccccccc8ddddddd5                              
186  , aaaaaaa0bbbbbbb1ccccccc8ddddddd6                              
187  , aaaaaaa0bbbbbbb1ccccccc8ddddddd7                              
188  , aaaaaaa0bbbbbbb1ccccccc8                                      
189  , aaaaaaa0bbbbbbb1ccccccc8ddddddd9                              
190  , aaaaaaa0                                                      
191  , aaaaaaa0bbbbbbb1                                              
192  , aaaaaaa0bbbbbbb1ccccccc9ddddddd2                              
193  , aaaaaaa0bbbbbbb1ccccccc9ddddddd3                              
194  , aaaaaaa0bbbbbbb1ccccccc9ddddddd4                              
195  , aaaaaaa0bbbbbbb1ccccccc9ddddddd5                              
196  , aaaaaaa0bbbbbbb1ccccccc9ddddddd6                              
197  , aaaaaaa0bbbbbbb1ccccccc9ddddddd7                              
198  , aaaaaaa0bbbbbbb1ccccccc9ddddddd8                              
199  , aaaaaaa0bbbbbbb1ccccccc9                                      
200  , aaaaaaa0                                                      

===END OF TEST RUN===
>>
? sql -s SEPPARAMDB 
<<
>>
* drop emp\g
<<
~
>>
* drop empchar\g
<<
~
>>
* drop dept\g
<<
~
>>
* drop allt\g
<<
~
>>
* drop bldg\g
<<
~
>>
* drop bldgvarchar\g
<<
~
>>
* \q
<<
>>
? delete eea10.exe 
<<
~
>>
? delete eea10.c 
<<
~
>>
? delete eea10.obj 
<<
~
>>
? delete eea10.o 
<<
~
>>
? delete allt.dat 
<<
~
>>


Ending at: Fri Mar  4 13:04:18 1994
