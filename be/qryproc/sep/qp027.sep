/*
	Test Name: eca06
	Time: 27-JUL-1989 16:27:20
	User Name: testenv   
 
	Test ID : 	eca06 (formerly af012)
	Module  :	qryproc
	Filename: 	eca06.sep
	Purpose	:	Test subqueries with the AVG set function
			on BTREE tables and secondary indiceeca06_s.
	Input Files  :	None
	Output Files : 	None
	Database     :	SEPPARAMDB
	Tables       :	eca06_s, eca06_sp
	Sypnopsis    :  Test subqueries with the AVG set function
                        on BTREE tables and secondary indiceeca06_s.

	History	: 27-Jul-1989	Created				srr
		11-8-91 changed the name of the tables and made
                        test more readable. CAMACHO
        25-March-1999  (kamra01) modified VPG_SZ to 4096
*/
? fill eca06s.jup 
!!
s5	adams 	    30	athens    
s3	blake 	    30	paris     
s4	clark 	    20	london    
s2	jones 	    10	paris     
s1	smith 	    20	london    
!!
? fill eca06sp.jup 
!!
s1	p1	   300
s1	p2	   200
s1	p3	   400
s1	p4	   200
s1	p5	   100
s1	p6	   100
s2	p1	   300
s2	p2	   400
s3	p2	   200
s4	p2	   200
s4	p4	   300
s4	p5	   400
!!
? sql -s SEPPARAMDB 
<<
>>
* drop table eca06_s;\g
<<
~
>>
* create table eca06_s (sno text(2) with null, xname text(6) with null, 
<<
>>
*	status i2 with null, city text(10) with null) 
<<
>>
*	with duplicates, page_size=4096;\g
<<
>>
* copy table eca06_s (sno =c0tab, xname =c0tab, status =c0tab, city =c0nl) 
<<
>>
*	from 'eca06s.jup';\g
<<
(5 rows)
>>
* drop table eca06_sp;\g
<<
~
>>
* create table eca06_sp (sno text(2) with null, pno text(2) with null, 
<<
>>
*	qty i2 with null) with duplicates, page_size=4096;\g
<<
>>
* copy table eca06_sp (sno =c0tab, pno =c0tab, qty =c0nl) 
<<
>>
*	from 'eca06sp.jup';\g
<<
(12 rows)
>>
* modify eca06_s to btree on sno with page_size =4096;\g
<<
(5 rows)
>>
* create index eca06_s_1 on eca06_s (xname) with structure = btree, page_size=4096;\g
<<
(5 rows)
>>
* create index eca06_s_2 on eca06_s (status) with structure = btree, page_size=4096;\g
<<
(5 rows)
>>
* create index eca06_s_3 on eca06_s (city) with structure = btree, page_size=4096;\g
<<
(5 rows)
>>
* modify eca06_sp to btree on sno with page_size =4096;\g
<<
(12 rows)
>>
* create index eca06_sp_1 on eca06_sp (pno) with structure = btree, page_size=4096;\g
<<
(12 rows)
>>
* create index eca06_sp_2 on eca06_sp (qty) with structure = btree, page_size=4096;\g
<<
(12 rows)
>>
* select * from eca06_s order by sno, xname, status, city;\g
<<

+------+------+------+----------+
|sno   |xname |status|city      |
+------+------+------+----------+
|s1    |smith |    20|london    |
|s2    |jones |    10|paris     |
|s3    |blake |    30|paris     |
|s4    |clark |    20|london    |
|s5    |adams |    30|athens    |
+------+------+------+----------+
(5 rows)
>>
* select * from eca06_sp order by sno, pno, qty;\g
<<

+------+------+------+
|sno   |pno   |qty   |
+------+------+------+
|s1    |p1    |   300|
|s1    |p2    |   200|
|s1    |p3    |   400|
|s1    |p4    |   200|
|s1    |p5    |   100|
|s1    |p6    |   100|
|s2    |p1    |   300|
|s2    |p2    |   400|
|s3    |p2    |   200|
|s4    |p2    |   200|
|s4    |p4    |   300|
|s4    |p5    |   400|
+------+------+------+
(12 rows)
>>
* create view eca06_s_v as select * from eca06_s;\g
<<
>>
* create view eca06_sp_v as select * from eca06_sp;\g
<<
>>
* select * from eca06_s_v order by sno, xname, status, city;\g
<<

+------+------+------+----------+
|sno   |xname |status|city      |
+------+------+------+----------+
|s1    |smith |    20|london    |
|s2    |jones |    10|paris     |
|s3    |blake |    30|paris     |
|s4    |clark |    20|london    |
|s5    |adams |    30|athens    |
+------+------+------+----------+
(5 rows)
>>
* select * from eca06_sp_v order by sno, pno, qty;\g
<<

+------+------+------+
|sno   |pno   |qty   |
+------+------+------+
|s1    |p1    |   300|
|s1    |p2    |   200|
|s1    |p3    |   400|
|s1    |p4    |   200|
|s1    |p5    |   100|
|s1    |p6    |   100|
|s2    |p1    |   300|
|s2    |p2    |   400|
|s3    |p2    |   200|
|s4    |p2    |   200|
|s4    |p4    |   300|
|s4    |p5    |   400|
+------+------+------+
(12 rows)
>>
* select pno from eca06_sp 
<<
>>
*	where qty in 
<<
>>
*	 (select avg(qty) from eca06_sp 
<<
>>
*	where qty > 100 group by pno having count(sno) > 1);\g
<<

+------+
|pno   |
+------+
|p1    |
|p1    |
|p4    |
+------+
(3 rows)
>>
* select * from eca06_s 
<<
>>
*	where status >any 
<<
>>
*	 (select avg(status) from eca06_s 
<<
>>
*	where city='rome');\g
/*
 If the argument set is empty, COUNT gives zero in both SQL and QUEL,
   but the other aggregate functions give null in SQL, zero in QUEL.
   In this query, if STATUS is always > 0 and the AVG is taken over the
   empty set, IBM SQL will return an empty result on the following query,
   while QUEL will return the set of all suppliereca06_s. 
*/
<<

+------+------+------+----------+
|sno   |xname |status|city      |
+------+------+------+----------+
+------+------+------+----------+
(0 rows)
>>
* select pno from eca06_sp_v 
<<
>>
*	where qty in 
<<
>>
*	 (select avg(qty) from eca06_sp_v 
<<
>>
*	where qty > 100 group by pno having count(sno) > 1);\g
<<

+------+
|pno   |
+------+
|p1    |
|p1    |
|p4    |
+------+
(3 rows)
>>
* select * from eca06_s_v 
<<
>>
*	where status >any 
<<
>>
*	 (select avg(status) from eca06_s_v 
<<
>>
*	where city='rome');\g
/*
 If the argument set is empty, COUNT gives zero in both SQL and QUEL,
   but the other aggregate functions give null in SQL, zero in QUEL.
   In this query, if STATUS is always > 0 and the AVG is taken over the
   empty set, IBM SQL will return an empty result on the following query,
   while QUEL will return the set of all suppliereca06_s. 
*/
<<

+------+------+------+----------+
|sno   |xname |status|city      |
+------+------+------+----------+
+------+------+------+----------+
(0 rows)
>>
* set trace point op132;\g
/*
Run the query on the base tables, flattening turned ON
*/
<<
>>
* select pno from eca06_sp 
<<
>>
*	where qty in 
<<
>>
*	 (select avg(qty) from eca06_sp 
<<
>>
*	where qty > 100 group by pno having count(sno) > 1);\g
<<

+------+
|pno   |
+------+
|p1    |
|p1    |
|p4    |
+------+
(3 rows)
>>
* select * from eca06_s 
<<
>>
*	where status >any 
<<
>>
*	 (select avg(status) from eca06_s 
<<
>>
*	where city='rome');\g
/*
 If the argument set is empty, COUNT gives zero in both SQL and QUEL,
   but the other aggregate functions give null in SQL, zero in QUEL.
   In this query, if STATUS is always > 0 and the AVG is taken over the
   empty set, IBM SQL will return an empty result on the following query,
   while QUEL will return the set of all suppliereca06_s. 
*/
<<

+------+------+------+----------+
|sno   |xname |status|city      |
+------+------+------+----------+
+------+------+------+----------+
(0 rows)
>>
* select pno from eca06_sp_v 
<<
>>
*	where qty in 
<<
>>
*	 (select avg(qty) from eca06_sp_v 
<<
>>
*	where qty > 100 group by pno having count(sno) > 1);\g
<<

+------+
|pno   |
+------+
|p1    |
|p1    |
|p4    |
+------+
(3 rows)
>>
* select * from eca06_s_v 
<<
>>
*	where status >any 
<<
>>
*	 (select avg(status) from eca06_s_v 
<<
>>
*	where city='rome');\g
/*
 If the argument set is empty, COUNT gives zero in both SQL and QUEL,
   but the other aggregate functions give null in SQL, zero in QUEL.
   In this query, if STATUS is always > 0 and the AVG is taken over the
   empty set, IBM SQL will return an empty result on the following query,
   while QUEL will return the set of all suppliereca06_s. 
*/
<<

+------+------+------+----------+
|sno   |xname |status|city      |
+------+------+------+----------+
+------+------+------+----------+
(0 rows)
>>
* drop table eca06_s;\g
<<
~
>>
* drop table eca06_sp;\g
<<
~
>>
* \q
<<
>>

Ending at: 16-AUG-1989 12:58:56
