/*
        Test Name: qp294.sep
        Time: Fri May 11 13:59:58 2001
        User Name: testenv
        Terminal type: septerm

        Test ID : qp294.sep
        Module  : be/qryproc
        Filename: qp294.sep
        Purpose : To test the new feature row producing procedure. 
        Input Files  : rp1.sc
        Output Files : rp1.exe
        Database     : qryprocdb
        Tables       : qp294_rah_a, qp294_rah_b, qp294_rah_c, qp294_lineitem,
                       qp294_udbetalingsenhed, qp294_belaegning
        Synopsis     : This is to test the row producing procedure using
                       complex SELECT queries within an embedded SQL program.

 History: 11-May-2001   (wu$ca01)       Created
**
**  ROW PRODUCING PROCEDURE
**
**  - COMPLEX SELECT QUERIES (ESQLC)
**
**  Known Problems:
**  1) Procedure 3, issue 10868897 (RESOLVED)
          28-Jun-2001	(wu$ca01) Recanonize-issue 10868897 resolved.
*/
? fill setup.sql 
!!
\i cleanup.sql
DROP TABLE qp294_lineitem\g
CREATE TABLE qp294_lineitem
(
  l_orderkey      INTEGER         NOT NULL,
  l_partkey       INTEGER         NOT NULL,
  l_suppkey       INTEGER         NOT NULL,
  l_linenumber    INTEGER         NOT NULL,
  l_quantity      FLOAT8          NOT NULL,
  l_extendedprice FLOAT8          NOT NULL,
  l_discount      FLOAT8          NOT NULL,
  l_tax           FLOAT8          NOT NULL,
  l_returnflag    CHAR(1)         NOT NULL,
  l_linestatus    CHAR(1)         NOT NULL,
  l_shipdate      DATE            NOT NULL,
  l_commitdate    DATE            NOT NULL,
  l_receiptdate   DATE            NOT NULL,
  l_shipinstruct  CHAR(25)        NOT NULL,
  l_shipmode      CHAR(10)        NOT NULL,
  l_comment       VARCHAR(44)     NOT NULL
)\g

create table qp294_rah_a ( k1 integer, val char(10) )\g
insert into qp294_rah_a values ( 1, 'one' )\g
insert into qp294_rah_a values ( 2, 'two' )\g
insert into qp294_rah_a values ( 3, 'three' )\g
insert into qp294_rah_a values ( 4, 'four' )\g
insert into qp294_rah_a values ( 5, 'five' )\g
create table qp294_rah_b ( k1 integer, k2 integer, val char(10) )\g
insert into qp294_rah_b values ( 1, 1, '11' )\g
insert into qp294_rah_b values ( 3, 2, '32' )\g
insert into qp294_rah_b values ( 5, 3, '53' )\g
insert into qp294_rah_b values ( 7, 4, '74' )\g
insert into qp294_rah_b values ( 9, 5, '95' )\g
create table qp294_rah_c ( k2 integer, val char(10) )\g
insert into qp294_rah_c values ( 1, 'one' )\g
insert into qp294_rah_c values ( 2, 'two' )\g
insert into qp294_rah_c values ( 3, 'three' )\g
insert into qp294_rah_c values ( 4, 'four' )\g
insert into qp294_rah_c values ( 9, 'nine' )\g

create table qp294_belaegning(
        medl_ident integer not null default 0,
        udbhvd_lbnr integer not null default 0,
        udbenh_lbnr integer not null default 0,
        lbnr integer not null default 0,
        blgtyp_type char(1) not null default ' ',
        dato date not null default ' ',
        timer money not null default 0,
        beloeb money not null default 0,
        time_krone_tk char(1) not null default ' ',
        reg_tid date not null default ' ',
        reg_init char(12) not null default ' ',
        reg_vers_nr integer not null default 0,
        reg_status char(1) not null default ' '
)\g
create table qp294_udbetalingsenhed(
        medl_ident integer not null default 0,
        udbhvd_lbnr integer not null default 0,
        lbnr integer not null default 0,
        uge_nr char(4) not null default ' ',
        fra_dato date not null default ' ',
        til_dato date not null default ' ',
        ydtyp_hoved_type char(2) not null default ' ',
        ydtyp_type char(4) not null default ' ',
        max_time money not null default 0,
        beregnet_sats money not null default 0,
        beregnet_time money not null default 0,
        daglig_time money not null default 0,
        brutto_beloeb money not null default 0,
        antal_hverdage smallint not null default 0,
        klipper_jn char(1) not null default ' ',
        indpl_lbnr integer,
        delperiode integer,
        forskat_type char(1) not null default ' ',
        isats_lbnr integer,
        sabel_nr integer,
        sabel_lbnr integer,
        reg_tid date not null default ' ',
        reg_init char(12) not null default ' ',
        reg_vers_nr integer not null default 0,
        reg_status char(1) not null default ' '
)\g

!!
? fill cleanup.sql 
!!
drop table qp294_table1\g
drop table qp294_rah_a\g
drop table qp294_rah_b\g
drop table qp294_rah_c\g
drop table qp294_lineitem\g
drop table qp294_udbetalingsenhed\g
drop table qp294_belaegning\g
drop procedure qp294_rp1\g
!!
? fill rp1.sc 
!!
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

EXEC SQL INCLUDE SQLCA;

main(int argc, char* argv[])
{
   EXEC SQL BEGIN DECLARE SECTION;
      char      *dbname;
      int       v1;
      char      v2[33];
      char      v3[33];
      char      v4[33];
      int       rcount;
      char      v5[1];
   EXEC SQL END DECLARE SECTION;

   int       i;

   EXEC SQL WHENEVER SQLERROR call sqlprint;

   dbname = argv[1];

   EXEC SQL CONNECT :dbname;

   printf("Procedure 1\n");
   EXEC SQL 
      create procedure qp294_rp1
          result row(char(1))
      as declare
          v1 char(1);
          v2 char(1);
          v3 int;
          v4 int;
          v5 float8;
          v6 float8;
          v7 float8;
          v8 float8;
          v9 float8;
          v10 int;
      begin
          message 'Query 01';
          for select
          l_returnflag,
          l_linestatus,
          sum(l_quantity) as sum_qty,
          sum(l_extendedprice) as sum_base_price,
          sum(l_extendedprice * (1-l_discount)) as sum_disc_price,
          sum(l_extendedprice * (1-l_discount) * (1+l_tax)) as sum_charge,
          avg(l_quantity) as avg_qty,
          avg(l_extendedprice) as avg_price,
          avg(l_discount) as avg_disc,
          count(*) as count_order
          into :v1, :v2, :v3, :v4, :v5,
           :v6, :v7, :v8, :v9, :v10
           from qp294_lineitem
           group by l_returnflag, l_linestatus
           order by l_returnflag, l_linestatus
           do
              return row(:v1);
           endfor;
      end;

   EXEC SQL execute procedure qp294_rp1 result row (:v5);
   EXEC SQL BEGIN;
   EXEC SQL END;

   EXEC SQL drop procedure qp294_rp1;

   printf("Procedure 2\n");
   EXEC SQL
      create procedure qp294_rp1
             result row(int)
      as declare
         v1 int;
         v2 char(12);
         v3 char(12);
         v4 char(12);
      begin
         message 'Query 02';
         for
            select a.k1, a.val, ifnull(b.val,''), ifnull(c.val,'')
               into :v1, :v2, :v3, :v4
            from qp294_rah_a a full join
                 ( qp294_rah_b b full join qp294_rah_c c on b.k2 = c.k2 )
                   on a.k1 = b.k1
            order by k1
            do
               return row(:v1);
         endfor;
      end;

   EXEC SQL execute procedure qp294_rp1 result row (:v1);
   EXEC SQL BEGIN;
   EXEC SQL END;

   EXEC SQL drop procedure qp294_rp1;


   printf("Procedure 3\n");
   EXEC SQL

      create procedure qp294_rp1
             result row(char(6))
      as declare
         v1 char(6);
         v2 money;
         v3 date;
         v4 date;
      begin
      message 'Query 03';
      for
      SELECT
         ue.uge_nr as uge_nr,
         sum(b.timer) as arbejde,
         ue.fra_dato as fra_dato
         into :v1, :v2, :v3
      from
           qp294_udbetalingsenhed ue
           left join  qp294_belaegning b on
           ue.medl_ident = b.medl_ident
           and ue.udbhvd_lbnr = b.udbhvd_lbnr
           and ue.lbnr = b.udbenh_lbnr
           and b.blgtyp_type = 'a'
      where
              ue.medl_ident = 173805795
              and  (( ue.fra_dato between '09/01/2000'
              and  '09/30/2000'
              or   ue.til_dato between '09/01/2000'
              and  '09/30/2000')
              or  ( ue.fra_dato <= '09/01/2000'
              and  ue.til_dato >= '09/30/2000' ))
              and ( ue.reg_status = 'f'
              or   not exists (select 1
                    from qp294_udbetalingsenhed ue
                    where
                     ue.medl_ident = 180525272
                     and ue.reg_status  = 'f'
                     and ue.lbnr = b.udbenh_lbnr
                     and  (( ue.fra_dato between '09/01/2000'
                     and  '09/30/2000'
                     or   ue.til_dato between '09/01/2000'
                     and  '09/30/2000' )
                     or  ( ue.fra_dato <= '09/01/2000'
                     and  ue.til_dato >= '09/30/2000'  ))))
          GROUP BY
             ue.uge_nr,
             ue.fra_dato
          ORDER BY uge_nr desc
      do
         return row(:v1);
      endfor;
   end;

   EXEC SQL execute procedure qp294_rp1 result row (:v1);
   EXEC SQL BEGIN;
   EXEC SQL END;

   EXEC SQL drop procedure qp294_rp1;

   EXEC SQL disconnect;
}
!!
? esqlc rp1.sc 
<<
~
>>
? sepcc rp1.c 
<<
~
>>
? seplnk rp1 
<<
~
>>
? sql SEPPARAMDB 
<<
~
>>
* \i setup.sql
<<
~
>>
* \q
<<
~
>>
? run rp1.exe SEPPARAMDB 
<<
Procedure 1
Procedure 2
Procedure 3
>>
? delete rp1.c 
<<
~
>>
? delete rp1.o 
<<
~
>>
? delete rp1.obj 
<<
~
>>
? delete rp1.exe 
<<
~
>>


Ending at: Thu Jun 28 17:28:26 2001
