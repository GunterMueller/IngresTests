/*
	Test Name: eea25.sep
	Time: 
	User Name: testenv
 
	Test ID : eea25
	Module  : cursors
	Filename: eea25.sep
	Purpose	: Verify that having declared a cursor over an 
		always-grantable view owned by the current user 
		FOR UPDATE without specifying column list user 
		will be able to update only those of the columns 
		which are based on a column of the underlying base 
		table (i.e. are not based on an expression)
	Input Files  : none
	Output Files : none
	Database     : SEPPARAMDB
	Tables       : eea25_table1
	Synopsis     : Declare a cursor on a view that is based off of a 
		table that you own. First try to update a non-simple 
		column of the view through the cursor. Next try to 
		update 2 columns of the view through the cursor, one that
		is a simple column and 1 that is a non-simple column.
		Last, update the simple columns of the view through the
		cursor.

	History	: 8-Dec-1993 (camacho) created from script that 
			andre created.
		  7-MAR-1997    (vissu01) Modified for NT
		  25-March-1999  (kamra01) modified VPG_SZ to 8192
	11-jun-2003 (abbjo03)
		Add includes and other changes to avoid warnings on VMS.
*/
? fill eea25.sc 
!!
#include <stdio.h>
#include <stdlib.h>

main(argc, argv)
int	argc;
char	*argv[];
{

exec sql include sqlca;

exec sql begin declare section;
	int   v1, v2, v3, v4, v5, v6, cnt;
	char  *dbname;
exec sql end declare section;

if (argc != 2)
    {
        printf("ERROR : program requires 1 arguments.");
        printf(" %d arguments given\n", (argc - 1));
        exit(-1);
    }

dbname = argv[1];

/********* Connecting to database **********/

exec sql whenever sqlerror stop;
exec sql connect :dbname;
exec sql whenever sqlerror call sqlprint;

/********* Creating Objects ****************/

exec sql drop eea25_table1;
exec sql drop eea25_view1;

exec sql create table eea25_table1(c1 i, c2 i, c3 i, c4 i, c5 i) with page_size=8192;
    if (sqlca.sqlcode!=0)
    {
	printf("Failure trying to create table eea25_table1\n");
	printf("will skip the remainder of the tests\n");
	exit(-1);
    }
    
exec sql create view eea25_view1 as
	select c1, c2, c3, c4, c5, 
		c1+c2 as c1_plus_c2, c2+c3 as c2_plus_c3,
		c1+c3 as c1_plus_c3 from eea25_table1;
    if (sqlca.sqlcode!=0)
    {
 	printf("Failure trying to create view eea25_view1\n");
	printf("will skip the remainder of the tests\n");
	exit(-1);
    }
    
/********** Populating Table eea25_table1 *************/

exec sql insert into eea25_table1 values(1,2,3,4,5);
exec sql insert into eea25_table1 values(11,12,13,14,15);
exec sql insert into eea25_table1 values(21,22,23,24,25);
exec sql insert into eea25_table1 values(31,32,33,34,35);
exec sql insert into eea25_table1 values(41,42,43,44,45);

exec sql select count(*) into :cnt from eea25_table1;
    if (sqlca.sqlcode!=0)
    {
	printf("Error trying to count rows in eea25_table1\n");
	printf("will skip the remainder of the tests\n");
	exit(-1);
    }
    else if (cnt != 5)
    {
	printf("eea25_table1 contains %d rows - should be 5\n", cnt);
	printf("will skip the remainder of the tests\n");
	exit(-1);
    }

exec sql commit;

/*******************************************************
** Declare cursor that will be used to read rows of eea25_table1 in a
** certain order to minimize test diffs
*******************************************************/
exec sql declare ordered cursor for
	select * from eea25_table1 order by c1,c2,c3,c4,c5;

/* Display contents of the table before we start messing with it */

printf("\nDumping table eea25_table1 \n");
printf("------------------------------------\n");
printf("C1\tC2\tC3\tC4\tC5\n");
printf("------------------------------------\n");

exec sql open ordered;

for (cnt = 0; cnt < 5; cnt++)
    {
	exec sql fetch ordered into :v1, :v2, :v3, :v4, :v5;
	if (sqlca.sqlcode < 0)
	{
	    printf("Failure trying to read eea25_table1 using a cursor\n");
	    printf("sqlcode = %d; skip the rest of the tests\n", sqlca.sqlcode);
	    exit(-1);
	}
	else if (sqlca.sqlcode==100)
	{
	    printf("Ran out of rows to read after ");
            printf("row # %d; will continue\n",	cnt);
	    break;
	}
	
	printf("%d\t%d\t%d\t%d\t%d\n", v1, v2, v3, v4, v5);
    }
exec sql close ordered;


/*************************************************************************
** Test Case:
**	Verify that having declared a cursor over an always-grantable view
**	owned by the current user FOR UPDATE without specifying column list
**	user will be able to update only those of the columns which are
**	based on a column of the underlying base table (i.e. are not based
**	on an expression)
*************************************************************************/
printf("\n\nEEA25:\n\n");
    
exec sql declare cursor7 cursor for select c1 from eea25_view1 for update;

exec sql open cursor7;

for (cnt = 0; cnt < 5; cnt++)
    {
	exec sql fetch cursor7 into :v1;
	if (sqlca.sqlcode < 0)
	{
	    printf("Failure trying to read eea25_view1 using a cursor\n");
	    printf("sqlcode = %d; skip the rest of test 7\n", sqlca.sqlcode);
	    break;
	}
	else if (sqlca.sqlcode==100)
	{
	    printf("Ran out of rows to read after row # %d; \n", cnt);
	    printf("Skip the rest of test 7\n");
	    break;
	}

	printf("\n Cursor returned : %d\n\n",v1);

	/********************************************
	** Do the error cases only for the first two iterations
	*********************************************/
	if (cnt < 2)
	{
	    /**************************************************
	    **  First try to update a non-simple column 
	    **************************************************/
	    printf("\n***\t\tTHIS WAS MEANT TO FAIL\n\n");

	    exec sql update eea25_view1 set c2_plus_c3=c1_plus_c2
		 where current of cursor7;
	    if (sqlca.sqlcode == 0)
	    {
		printf("ERROR - We were able to update a non-simple column\n");
	    }

	    /***************************************************
	    ** Now try to update a simple column and a non-simple column 
	    ***************************************************/
	    printf("\n***\t\tTHIS WAS MEANT TO FAIL\n\n");
	    exec sql update eea25_view1
		set c1=c1+1, c2_plus_c3=c1_plus_c2 where current of cursor7;
	    if (sqlca.sqlcode == 0)
	    {
		printf("ERROR - We were able to update a non-simple\n");
                printf("column along with a simple column\n");
	    }
	}
	
	/****************************************************
	** Finally, update the simple columns 
	****************************************************/
	exec sql update eea25_view1
	    set c1 = -c1, c2 = -2*c2, c3 = -3*c3
		where current of cursor7;
			
	if (sqlca.sqlcode < 0)
	{
	    printf("ERROR - We were unable to update simple columns\n");
	}
    }
    
    exec sql close cursor7;

printf("\nDumping table eea25_table1 \n");
printf("------------------------------------\n");
printf("C1\tC2\tC3\tC4\tC5\n");
printf("------------------------------------\n");

exec sql open ordered;

for (cnt = 0; cnt < 5; cnt++)
    {
	exec sql fetch ordered into :v1, :v2, :v3, :v4, :v5;
	if (sqlca.sqlcode < 0)
	{
	    printf("Failure trying to read eea25_table1 using a cursor\n");
	    printf("sqlcode = %d; skip the rest of the tests\n", sqlca.sqlcode);
	    exit(-1);
	}
	else if (sqlca.sqlcode==100)
	{
	    printf("Ran out of rows to read after ");
            printf("row # %d; will continue\n",	cnt);
	    break;
	}

	printf("%d\t%d\t%d\t%d\t%d\n", v1, v2, v3, v4, v5);
    }
exec sql close ordered;

/****************************************************
*
*     ROLLING BACK TRANSACTION. Still need to drop
*     table eea25_table1 to finish cleanup!
*
*****************************************************/

    exec sql rollback;

    exec sql whenever sqlerror continue;
    exec sql drop eea25_table1;

    exec sql commit;

    printf("\n\nDisconnecting....\n\n");
    exec sql disconnect;

}
!!
? sepesqlc eea25.sc 
<<
ESQL eea25.sc:
>>
? sepcc eea25.c 
<<
>>
<<
eea25.c
>>
? seplnk eea25 
<<
>>
? sql -s SEPPARAMDB 
<<
>>
* drop table eea25_table1;\g
<<
~
>>
* \q 
<<
>>
? run eea25.exe SEPPARAMDB 
<<
E_US0AC1 DROP: 'eea25_table1' does not exist or is not owned by you.
    (Tue Feb  1 16:05:53 1994)
E_US0AC1 DROP: 'eea25_view1' does not exist or is not owned by you.
    (Tue Feb  1 16:05:53 1994)

Dumping table eea25_table1 
------------------------------------
C1	C2	C3	C4	C5
------------------------------------
1	2	3	4	5
11	12	13	14	15
21	22	23	24	25
31	32	33	34	35
41	42	43	44	45


EEA25:


 Cursor returned : 1


***		THIS WAS MEANT TO FAIL

E_PS0402 UPDATE: column 'c2_plus_c3' of a view 'eea25_view1' may not be
    updated 
using cursor 'cursor7' because it is based on an expression.
    (Tue Feb  1 16:05:54 1994)

***		THIS WAS MEANT TO FAIL

E_PS0402 UPDATE: column 'c2_plus_c3' of a view 'eea25_view1' may not be
    updated 
using cursor 'cursor7' because it is based on an expression.
    (Tue Feb  1 16:05:54 1994)

 Cursor returned : 11


***		THIS WAS MEANT TO FAIL

E_PS0402 UPDATE: column 'c2_plus_c3' of a view 'eea25_view1' may not be
    updated 
using cursor 'cursor7' because it is based on an expression.
    (Tue Feb  1 16:05:54 1994)

***		THIS WAS MEANT TO FAIL

E_PS0402 UPDATE: column 'c2_plus_c3' of a view 'eea25_view1' may not be
    updated 
using cursor 'cursor7' because it is based on an expression.
    (Tue Feb  1 16:05:54 1994)

 Cursor returned : 21


 Cursor returned : 31


 Cursor returned : 41


Dumping table eea25_table1 
------------------------------------
C1	C2	C3	C4	C5
------------------------------------
-41	-84	-129	44	45
-31	-64	-99	34	35
-21	-44	-69	24	25
-11	-24	-39	14	15
-1	-4	-9	4	5


Disconnecting....

>>
? delete eea25.exe 
<<
~
>>
? delete eea25.c 
<<
~
>>
? delete eea25.obj 
<<
~
>>
? delete eea25.o 
<<
~
>>


Ending at: Tue Feb  1 16:05:56 1994
