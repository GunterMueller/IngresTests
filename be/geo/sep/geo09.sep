/*
  Copyright (c) 2010 Ingres Corporation
    Test ID : geo09.sep
    Module :
    Filename: geo09.sep
    Purpose : To test OGC 1.1 SQL functions - part 1
    Input Files :
    Output Files :
    Database : SEPPARAMDB
    Tables : geo09a
    Synopsis : Tests OGC 1.1 SQL functions - part 1
               Functions tested:
               GeometryType, Dimension, IsEmpty,
               IsSimple, AsText
    History: 23-MAR-2010 Created by Alex Trofast

*/
? fill geo09ddl.sql 
!!
CREATE TABLE geo09a (fid INT NOT NULL PRIMARY KEY, shape POINT);
CREATE TABLE geo09b (fid INT NOT NULL PRIMARY KEY, shape POLYGON);
CREATE TABLE geo09c (fid INT NOT NULL PRIMARY KEY, shape LINESTRING);
CREATE TABLE geo09d (fid INT NOT NULL PRIMARY KEY, shape MULTIPOINT);
CREATE TABLE geo09e (fid INT NOT NULL PRIMARY KEY, shape MULTIPOLYGON);
CREATE TABLE geo09f (fid INT NOT NULL PRIMARY KEY, shape MULTILINESTRING);
CREATE TABLE geo09g (fid INT NOT NULL PRIMARY KEY, shape GEOMETRYCOLLECTION);
\g
INSERT INTO geo09a VALUES (1, PointFromText('POINT(1 1)'));
INSERT INTO geo09a VALUES (2, PointFromText('POINT EMPTY'));
INSERT INTO geo09b VALUES (1, PolyFromText('POLYGON((1 1, 2 2, 3 3, 4 4, 1 1))'));
INSERT INTO geo09c VALUES (1, LineFromText('LINESTRING(1 1, 2 2, 3 3, 4 4, 4 0, 0 4)-
'));
INSERT INTO geo09c VALUES (2, LineFromText('LINESTRING(1 1, 2 2, 3 3, 4 4, 1 1)'));
INSERT INTO geo09d VALUES (1, MPointFromText('MULTIPOINT(1 1, 2 2, 3 3)'));
INSERT INTO geo09e VALUES (1, MPolyFromText('MULTIPOLYGON(((0 0, 0 4, 4 4, 4 0, 0 0)-
), ((1 1, 1 2, 2 2, 2 1, 1 1)))'));
INSERT INTO geo09f VALUES (1, MLineFromText('MULTILINESTRING((1 1, 2 2, 3 3), (4 4, -
5 5, 6 6))'));
INSERT INTO geo09g VALUES (1, GeomCollFromText('GEOMETRYCOLLECTION(POINT(1 1), POLYG-
ON((1 1, 2 2, 3 3, 4 4, 1 1)), LINESTRING(1 1, 2 2, 4 4, 5 5))'));
\g
!!
<<
>>
? sql SEPPARAMDB +U -S 
<<
>>
* GRANT ALL ON spatial_ref_sys TO PUBLIC\g
<<
>>
* \q
<<
>>
? sql SEPPARAMDB -S 
<<
>>
* \i geo09ddl.sql
<<
>>
* SELECT ST_GeometryType(shape) from geo09a ORDER BY fid\g
<<
col1                           
Point                          
Point                          
>>
* SELECT ST_GeometryType(shape) from geo09b ORDER BY fid\g
<<
col1                           
Polygon                        
>>
* SELECT ST_GeometryType(shape) from geo09c ORDER BY fid\g
<<
col1                           
LineString                     
LineString                     
>>
* SELECT ST_GeometryType(shape) from geo09d ORDER BY fid\g
<<
col1                           
MultiPoint                     
>>
* SELECT ST_GeometryType(shape) from geo09e ORDER BY fid\g
<<
col1                           
MultiPolygon                   
>>
* SELECT ST_GeometryType(shape) from geo09f ORDER BY fid\g
<<
col1                           
MultiLineString                
>>
* SELECT ST_GeometryType(shape) from geo09g ORDER BY fid\g
<<
col1                           
GeometryCollection             
>>
* SELECT ST_Dimension(shape) from geo09a ORDER BY fid;\g
<<
col1   
     0 
     0 
>>
* SELECT ST_Dimension(shape) from geo09b ORDER BY fid;\g
<<
col1   
     2 
>>
* SELECT ST_Dimension(shape) from geo09c ORDER BY fid;\g
<<
col1   
     1 
     1 
>>
* SELECT ST_Dimension(shape) from geo09d ORDER BY fid;\g
<<
col1   
     0 
>>
* SELECT ST_Dimension(shape) from geo09e ORDER BY fid;\g
<<
col1   
     2 
>>
* SELECT ST_Dimension(shape) from geo09f ORDER BY fid;\g
<<
col1   
     1 
>>
* SELECT ST_Dimension(shape) from geo09g ORDER BY fid;\g
<<
col1   
     2 
>>
* SELECT ST_IsEmpty(shape) from geo09a ORDER BY fid;\g
<<
col1          
            0 
            1 
>>
* SELECT ST_IsEmpty(shape) from geo09b ORDER BY fid\g
<<
col1          
            0 
>>
* SELECT ST_IsEmpty(shape) from geo09c ORDER BY fid;\g
<<
col1          
            0 
            0 
>>
* SELECT ST_IsEmpty(shape) from geo09d ORDER BY fid;\g
<<
col1          
            0 
>>
* SELECT ST_IsEmpty(shape) from geo09e ORDER BY fid;\g
<<
col1          
            0 
>>
* SELECT ST_IsEmpty(shape) from geo09f ORDER BY fid;\g
<<
col1          
            0 
>>
* SELECT ST_IsEmpty(shape) from geo09g ORDER BY fid;\g
<<
col1          
            0 
>>
* SELECT ST_IsSimple(shape) from geo09a ORDER BY fid;\g
<<
col1          
            1 
            1 
>>
* SELECT ST_IsSimple(shape) from geo09b ORDER BY fid;\g
<<
col1          
            1 
>>
* SELECT ST_IsSimple(shape) from geo09c ORDER BY fid;\g
<<
col1          
            0 
            0 
>>
* SELECT ST_IsSimple(shape) from geo09d ORDER BY fid;\g
<<
col1          
            1 
>>
* SELECT ST_IsSimple(shape) from geo09e ORDER BY fid;\g
<<
col1          
            1 
>>
* SELECT ST_IsSimple(shape) from geo09f ORDER BY fid;\g
<<
col1          
            1 
>>
* SELECT ST_IsSimple(shape) from geo09g ORDER BY fid;\g
<<
E_AD5600 An error has occured in Ingres Geospatial: IsSimple does not
    support GeometryCollections.
    (Tue Apr  6 07:48:23 2010)

>>
* SELECT AsText(ST_Boundary(shape)) from geo09a ORDER BY fid;\g
<<
col1                             
                                  
                                  
>>
* SELECT AsText(ST_Boundary(shape)) from geo09b ORDER BY fid;\g
<<
col1                             
 LINESTRING (1 1, 2 2, 3 3, 4 4, 1 1) 
>>
* SELECT AsText(ST_Boundary(shape)) from geo09c ORDER BY fid;\g
<<
col1                             
 MULTIPOINT (1 1, 0 4)            
 MULTIPOINT EMPTY                 
>>
* SELECT AsText(ST_Boundary(shape)) from geo09d ORDER BY fid;\g
<<
col1                             
                                  
>>
* SELECT AsText(ST_Boundary(shape)) from geo09e ORDER BY fid;\g
<<
col1                             
 MULTILINESTRING ((0 0, 0 4, 4 4, 4 0, 0 0), (1 1, 1 2, 2 2, 2 1, 1 1)) 
>>
* SELECT AsText(ST_Boundary(shape)) from geo09f ORDER BY fid;\g
<<
col1                             
 MULTIPOINT (1 1, 3 3, 4 4, 6 6)  
>>
* SELECT AsText(ST_Boundary(shape)) from geo09g ORDER BY fid;\g
<<
E_AD5600 An error has occured in Ingres Geospatial: Boundary does not
    support GeometryCollections.
    (Tue Apr  6 07:48:34 2010)

>>
* SELECT AsText(ST_Envelope(shape)) from geo09a ORDER BY fid;\g
<<
col1                             
 POINT (1 1)                      
 POINT EMPTY                      
>>
* SELECT AsText(ST_Envelope(shape)) from geo09b ORDER BY fid;\g
<<
col1                             
 POLYGON ((1 1, 4 1, 4 4, 1 4, 1 1)) 
>>
* SELECT AsText(ST_Envelope(shape)) from geo09c ORDER BY fid;\g
<<
col1                             
 POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)) 
 POLYGON ((1 1, 4 1, 4 4, 1 4, 1 1)) 
>>
* SELECT AsText(ST_Envelope(shape)) from geo09d ORDER BY fid;\g
<<
col1                             
 POLYGON ((1 1, 3 1, 3 3, 1 3, 1 1)) 
>>
* SELECT AsText(ST_Envelope(shape)) from geo09e ORDER BY fid;\g
<<
col1                             
 POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0)) 
>>
* SELECT AsText(ST_Envelope(shape)) from geo09f ORDER BY fid;\g
<<
col1                             
 POLYGON ((1 1, 6 1, 6 6, 1 6, 1 1)) 
>>
* SELECT AsText(ST_Envelope(shape)) from geo09g ORDER BY fid;\g
<<
col1                             
 POLYGON ((1 1, 5 1, 5 5, 1 5, 1 1)) 
>>
* \q
<<
>>


Ending at: Wed Jun 09 22:30:34 2010
