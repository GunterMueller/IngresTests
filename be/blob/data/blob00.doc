1	
Test Name: blob00.sep
	User Name: ingres
	Terminal type: septerm
 
	Test ID : (TBD)
	Module  : be/blob
	Filename: blob00.sep
	Purpose	: Tests concurrent blob inserts.
	Input Files  : none.
	Output Files : none.
	Database     : SEPPARAMDB
	Tables       : blob00
	Synopsis     : This test tests concurrent blob inserts.

 History:
	26-Feb-1999	(somsa01) Created
	22-mar-1999	(walro03)
	      Removed -v"|" from sql statement; it caused diffs.
	      Renamed table book to blob00.
	      Ignore results of "drop table".
	      Drop table at end of sep test.
	07-apr-1999	(vande02)
	      Hard-coded VPG_SZ to 8K.
        26-Mar-2001	(hanch04)
	      Update test for Ingres 2.6 and add defines for CL calls.
	19-sep-2003	(abbjo03)
	      Add alternate canon for ESQLC which doesn't print a banner on VMS.
	      Lined up history comments for easier reading and added empty
	      canons to confirm database connection with sql.

	      *** NOTE *** This test is not fully functional for VMS until an
	      equivalent of concur_blob.sh can be created VMS.  In the meantime,
	      this test will get 4 diffs due to the result files *.res not
	      being found which concur_blob.sh was supposed to create.

? fill blob_insert.sc 
!!
#include    <stdio.h>
#define MEfill(n,v,s) memset(s,v,n)
#define STcopy(a,b)   strcpy(b,a)


EXEC SQL include sqlca;

#define OK 0
#define FAIL 1

/*
**  Name: blob_insert.sc
**
**  Description:
**	This program:
**	    a) loops 40 times, inserting into a table containing a
**	    long varchar field.
**	or
**	    b) loads a blob table from given data files.
**
**	Several segments are inserted via a PUT datahandler.
**
**  History:
**	12-feb-1999 (somsa01)
**	    Created.
**	19-feb-1999 (somsa01)
**	    Changed prototypes so that it would compile on all UNIX machines.
*/

int Times = 40;

void read_book(char chr);
void read_book2(FILE *fp);
void ins_book(int chr);
void ins_book2(char *bookname);

main(int argc, char *argv[])
{
    EXEC SQL begin declare section;
    char	dbname[32];
    EXEC SQL end declare section;
    int		i, insert_type;

    if (argc < 3)
    {
	SIprintf("Usage:\nblob_insert <database name> 1 <char as int>\n");
	SIprintf("blob_insert <database name> 2 <at least 3 textfile names>\n");
	PCexit(FAIL);
    }

    CVan(argv[2], &insert_type);
    if ((insert_type == 2) && (argc < 5))
    {
	SIprintf("You must supply at least 3 textfile names.\n");
	PCexit(FAIL);
    }

    srand(getpid() * 17);
    STcopy(argv[1], dbname);

    EXEC SQL whenever sqlerror stop;
    SIprintf("Connecting to database ...\n");
    EXEC SQL connect :dbname;

    EXEC SQL whenever sqlerror call sqlprint;

    SIprintf("Inserting blobs ...\n");

    if (insert_type == 1)
    {
	int	chr;

	Times = 40;
	CVan(argv[3], &chr);
	while (Times--)
	{
	    for (i = 0; i < 7; i++)
		ins_book(chr);
	}
    }
    else
    {
	Times = 20;
	while (Times--)
	{
	    for (i = 0; i < argc - 3; i++)
		ins_book2(argv[3 + i]);
	}
    }

    SIprintf("Done.\n");
    EXEC SQL disconnect;

    PCexit(OK);
}

void
ins_book(int chr)
{
    EXEC SQL BEGIN DECLARE SECTION;
    int		newnum;
    char	bname[32];
    EXEC SQL END DECLARE SECTION;

    newnum = rand();
    IISTprintf(bname, "CONSTANT%d", getpid());
    EXEC SQL INSERT INTO blob00 VALUES( :newnum, :bname,
				      DATAHANDLER(read_book(chr)) );
   
    if (sqlca.sqlcode != 0)
    {
	SIprintf( "Error %d while inserting blob, will rollback\n",
		sqlca.sqlcode );
	EXEC SQL rollback;
	if (sqlca.sqlcode != 0)
	    SIprintf("    Error rolling back after error.\n");
    }
    else
    { 
	EXEC SQL commit;
	if (sqlca.sqlcode != 0)
	    SIprintf("    Error commiting after insert.\n");
    }
}

void
ins_book2(char *bookname)
{
    EXEC SQL begin declare section;
    int		newnum;
    char	*book = bookname;
    EXEC SQL end declare section;
    FILE	*fp;

    if ((fp = fopen(book, "r")) == NULL)
    {
	SIprintf("Cannot open %s\n", book);
	EXEC SQL disconnect;
	PCexit(FAIL);
    }

    /* Get the next available id num. */
    newnum = Times * 20;

    EXEC SQL insert into blob00 values (:newnum, :book,
				      DATAHANDLER(read_book2(fp)));

    if (sqlca.sqlcode != 0)
    {
	SIprintf("Error %d while inserting blob, will rollback\n",
		 sqlca.sqlcode);
	EXEC SQL rollback;
	if (sqlca.sqlcode != 0)
	    SIprintf("	Error rolling back after error!\n");
    }
    else
    {
	EXEC SQL commit;
	if (sqlca.sqlcode != 0)
	    SIprintf("	Error commiting after insert!\n");
    }

    fclose(fp);
}

void
read_book(char chr)
{
    EXEC SQL BEGIN DECLARE SECTION;
    char	segment[936];
    int		seglen;
    EXEC SQL END DECLARE SECTION;

    seglen = sizeof(segment);
    MEfill(seglen, chr, segment);
    EXEC SQL PUT DATA ( SEGMENT = :segment, SEGMENTLENGTH = :seglen,
			DATAEND = 0 );

    if (sqlca.sqlcode != 0)
	SIprintf("Error %d while PUTing blob A\n", sqlca.sqlcode);

    MEfill(seglen, chr, segment);
    EXEC SQL PUT DATA ( SEGMENT = :segment, SEGMENTLENGTH = :seglen,
			DATAEND = 0 );

    if (sqlca.sqlcode != 0)
	SIprintf("Error %d while PUTing blob B\n", sqlca.sqlcode);

    MEfill(seglen, chr, segment);
    EXEC SQL PUT DATA ( SEGMENT = :segment, SEGMENTLENGTH = :seglen,
			DATAEND = 0 );

    if (sqlca.sqlcode != 0)
	SIprintf("Error %d while PUTing blob C\n", sqlca.sqlcode);

    MEfill(seglen, chr, segment);
    EXEC SQL PUT DATA ( SEGMENT = :segment, SEGMENTLENGTH = :seglen,
			DATAEND = 0);

    if (sqlca.sqlcode != 0)
	SIprintf("Error %d while PUTing blob D\n", sqlca.sqlcode);

    MEfill(seglen, chr, segment);
    EXEC SQL PUT DATA ( SEGMENT = :segment, SEGMENTLENGTH = :seglen,
			DATAEND = 0 );

    if (sqlca.sqlcode != 0)
	SIprintf("Error %d while PUTing blob D\n", sqlca.sqlcode);

    MEfill(seglen, chr, segment);
    EXEC SQL PUT DATA ( SEGMENT = :segment, SEGMENTLENGTH = :seglen,
			DATAEND = 0 );

    if (sqlca.sqlcode != 0)
	SIprintf("Error %d while PUTing blob D\n", sqlca.sqlcode);

    MEfill(seglen, chr, segment);
    EXEC SQL PUT DATA ( SEGMENT = :segment, SEGMENTLENGTH = :seglen,
			DATAEND = 0 );

    if (sqlca.sqlcode != 0)
	SIprintf("Error %d while PUTing blob D\n", sqlca.sqlcode);

    MEfill(seglen, chr, segment);
    EXEC SQL PUT DATA ( SEGMENT = :segment, SEGMENTLENGTH = :seglen,
			DATAEND = 0 );

    if (sqlca.sqlcode != 0)
	SIprintf("Error %d while PUTing blob D\n", sqlca.sqlcode);

    MEfill(seglen, chr, segment);
    EXEC SQL PUT DATA ( SEGMENT = :segment, SEGMENTLENGTH = :seglen,
			DATAEND = 0 );

    if (sqlca.sqlcode != 0)
	SIprintf("Error %d while PUTing blob D\n", sqlca.sqlcode);

    MEfill(seglen, chr, segment);
    EXEC SQL PUT DATA ( SEGMENT = :segment, SEGMENTLENGTH = :seglen,
			DATAEND = 0 );

    if (sqlca.sqlcode != 0)
	SIprintf("Error %d while PUTing blob D\n", sqlca.sqlcode);

    MEfill(seglen, chr, segment);
    EXEC SQL PUT DATA ( SEGMENT = :segment, SEGMENTLENGTH = :seglen,
			DATAEND = 1 );

    if (sqlca.sqlcode != 0)
	SIprintf("Error %d while PUTing blob E\n", sqlca.sqlcode);
}

void
read_book2(FILE *fp)
{
    EXEC SQL begin declare section;
    char	segment[936];
    int		seglen;
    int		data_end;
    EXEC SQL end declare section;
    int bytes;

    while ((bytes = fread(segment, 1, sizeof segment, fp)) > 0)
    {
#ifdef DEBUG
	SIprintf("read %d bytes ERR=%d  EOF=%d\n", bytes, ferror(fp), feof(fp));
#endif

	data_end = (bytes != sizeof segment);
	seglen = bytes;
	EXEC SQL put data ( segment = :segment, segmentlength = :seglen,
			    dataend = :data_end );
	if (sqlca.sqlcode != 0)
	{
	    SIprintf("Error %d while PUTing blob.\n", sqlca.sqlcode);
	}
    }

    if (ferror(fp) || ! feof(fp))
    {
	SIprintf("AFTER %d bytes ERR=%d  EOF=%d\n", bytes, ferror(fp),
		 feof(fp));
    }
}
!!
? esqlc blob_insert.sc 
<<
ESQL blob_insert.sc:
>>
<<
>>
? sepcc blob_insert.c 
<<
>>
<< IF (NT_GENERIC)
blob_insert.c
>>
? seplnk blob_insert 
<<
>>
? fill create.sql 
!!
create table blob00 (bid integer, bname char(32), btext long varchar) with page_size=8192;\p\g
modify blob00 to hash on bid, bname;\p\g
!!
? sql -s SEPPARAMDB 
<<

>>
* drop table blob00;\p\g
<<
~
>>
* \i create.sql 
<<
create table blob00 (bid integer, bname char(32), btext long varchar) with page_size=8192;
modify blob00 to hash on bid, bname;
(0 rows)
>>
* \q 
<<

>>
.if (NT_GENERIC) 
? fill concur_blob.bat 
!!
@echo off
start /b blob_insert.exe %SEPPARAMDB% 1 65 >%TST_OUTPUT%\blob_insert_1.res
start /b blob_insert.exe %SEPPARAMDB% 1 66 >%TST_OUTPUT%\blob_insert_2.res
start /b blob_insert.exe %SEPPARAMDB% 1 67 >%TST_OUTPUT%\blob_insert_3.res
start /b blob_insert.exe %SEPPARAMDB% 1 68 >%TST_OUTPUT%\blob_insert_4.res
:LOOP1
grep "Done\." %TST_OUTPUT%\blob_insert_1.res >nul
if errorlevel 1 goto LOOP1
:LOOP2
grep "Done\." %TST_OUTPUT%\blob_insert_2.res >nul
if errorlevel 1 goto LOOP2
:LOOP3
grep "Done\." %TST_OUTPUT%\blob_insert_3.res >nul
if errorlevel 1 goto LOOP3
:LOOP4
grep "Done\." %TST_OUTPUT%\blob_insert_4.res >nul
if errorlevel 1 goto LOOP4
!!
? run concur_blob.bat 
<<
>>
.else
.if (UNIX)
? fill concur_blob.sh
!!
blob_insert.exe $SEPPARAMDB 1 65 >$TST_OUTPUT/blob_insert_1.res 2>&1 &
blob_insert.exe $SEPPARAMDB 1 66 >$TST_OUTPUT/blob_insert_2.res 2>&1 &
blob_insert.exe $SEPPARAMDB 1 67 >$TST_OUTPUT/blob_insert_3.res 2>&1 &
blob_insert.exe $SEPPARAMDB 1 68 >$TST_OUTPUT/blob_insert_4.res 2>&1 &
wait
!!
? sh concur_blob.sh
<<
>>
.endif
.endif 
? type @file(tst_output,blob_insert_1.res) 
<<
Connecting to database ...
Inserting blobs ...
Done.
>>
? type @file(tst_output,blob_insert_2.res) 
<<
Connecting to database ...
Inserting blobs ...
Done.
>>
? type @file(tst_output,blob_insert_3.res) 
<<
Connecting to database ...
Inserting blobs ...
Done.
>>
? type @file(tst_output,blob_insert_4.res) 
<<
Connecting to database ...
Inserting blobs ...
Done.
>>
? sql -s SEPPARAMDB 
<<

>>
* drop table blob00;\p\g
<<
~
>>
* \q 
<<

>>
? delete @file(tst_output,blob_insert_1.res) 
<<
~
>>
? delete @file(tst_output,blob_insert_2.res) 
<<
~
>>
? delete @file(tst_output,blob_insert_3.res) 
<<
~
>>
? delete @file(tst_output,blob_insert_4.res) 
<<
~
>>
? delete blob_insert.c 
<<
~
>>
? delete blob_insert.exe 
<<
~
>>
.if (NT_GENERIC || VMS) 
? delete blob_insert.obj 
<<
~
>>
.else
.if (UNIX)
? delete blob_insert.o
<<
~
>>
.endif
.endif 
1
