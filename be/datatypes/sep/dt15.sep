/*
Copyright (c) 2007 Ingres Corporation

	Test Name    : dt15.sep (formerly hha15.sep)
	User Name    : testenv      
	Test ID      : dt15.sep
	Module       : be/datatypes
	Purpose	     : Test string functions with two parameters
	Input Files  : none
	Output Files : none
	Database     : SEPPARAMDB2
	Tables       : hh015
	Synopsis     : Test string functions with two parameters.

	History	: 30-jun-1989	Created		Author William Adams
                        converted by :dennisk             
                 7/90   Test modified to conform to Test Case/
                        Portability Standards.
       	  05-Jun-1992	modified by Paul Park
			added alt canans for locate() running
			with udt dbms server
          02-Nov-1992	(gillnh2o)
			This test was always diff'ing and the diff tolerance
			level was being reached causing the test to always
			abort. The reason for the diff was due to the return
			message for the locate() function. I accepted an 
			alternate canon for each of the locate() functions
			that was causing a diff against a udt server. I 
			tested against a udt server and a non-udt server. Test
			run on a Sun platform and a VMS platform.
			I also fixed the test name from hh0.. to hha...
	  12-Aug-1993	(sandhya)
			Removed the hardcoded dbname from comments section.
			Accepted 48 new canons for error messages from locate()
			function as it has changed for 6.5.
          05-Sep-1996	(Author)
          30-mar-1999	(yu$pe02) 
			Hard code page size to 4K.
	  30-Jan-2003	(hanch04)
			Updated canons to match Ingres 2.6/0303 Service Pack 2
	  04-Feb-2003	(hanch04)
			Update to run again 2.6/0303 and previous SP
          12-May-2003	(shafa01)
			Removed canons specific to Ingres 2.6 SP1, 'E_US0B5C
			line 1, Function 'locate' is not defined for arguments
			of type 'c' and 'integer'. Explicitly convert its
			arguments  to the desired type(s). Test will work with
			Ingres 2.6 SP2. Lined up the history comments.
          25-Jun-2004   (vande02) Cleaning up and aligning history comments.
           5-Jun-2007   (vande02) Replaced all canons for the 'locate' function
			with new expected E_US0B5C message.  Development 
			confirmed this is expected as of Ingres 2006 Release 3.	

			Made header corrections.
           6-Jul-2009	(wanfr01) Added canons for iimerges with udts installed
                        HOQA is run on VMS with UDTS installed, causing errors.
          23-Mar-2010   (hanal04) Invalid types in LOCATE() are now logged as
                        E_US1072.
*/
? quel SEPPARAMDB2 -s 
<<
>>
* destroy hh015	\g
<<
~
>>
* create  hh015	(id = i2, c20 = c20, i1 = i1, i2 = i2, i4 = i4,	f4 = f4,
<<
>>
*	f8          = f8,	money       = money,	date        = date,	c1          = c1,	t1   -
       = text(1),	char1       = char(1),	varchar1    = varchar(1),
<<
>>
*	i1n         = i1	 with null,	i2n         = i2	 with null,	i4n         = i4	 with n-
ull,	f4n         = f4	 with null,	f8n         = f8	 with null,	moneyn      = money	 -
with null,
<<
>>
*	daten       = date	 with null,	c1n         = c1	 with null,	t1n         = text(1)	-
 with null,	char1n      = char(1)	 with null,	varchar1n   = varchar(1) with null) wi-
th page_size=4096	\g
<<
>>
* append	hh015	(	id          = 1,	c20         = "1",	i1          = 1,	i2          = -
1,	i4          = 1,	f4          = 1,
<<
>>
*	f8          = 1,	money       = 1,	date        = "1/1/57",	c1          = "a",	t1   -
       = "a",	char1       = "a",	varchar1    = "a",	i1n         = 1,
<<
>>
*	i2n         = 1,	i4n         = 1,	f4n         = 1,	f8n         = 1,	moneyn      = -
1,
<<
>>
*	daten       = "1/1/57",	c1n         = "a",	t1n         = "a",	char1n      = "a",	v-
archar1n   = "a")	\g
<<
(1 row)
>>
* append	hh015	(	id          = 2,	c20         = "2",	i1          = 2,	i2          = -
2,	i4          = 2,	f4          = 2,	f8          = 2,
<<
>>
*	money       = 2,	date        = "2/2/67",	c1          = "B",	t1          = "B",	cha-
r1       = "B",	varchar1    = "B",	i1n         = 2,	i2n         = 2,	i4n         = 2-
,
<<
>>
*	f4n         = 2,	f8n         = 2,	moneyn      = 2,	daten       = "2/2/67",	c1n    -
     = "B",	t1n         = "B",	char1n      = "B",	varchar1n   = "B")	\g
<<
(1 row)
>>
* append	hh015	(	id          = 3,	c20         = "3",	i1          = 3,	i2          = -
3,	i4          = 3,	f4          = 3,	f8          = 3,
<<
>>
*	money       = 3,	date        = "3/3/77",	c1          = "3",	t1          = "3",	cha-
r1       = "3",	varchar1    = "3",	i1n         = 3,	i2n         = 3,
<<
>>
*	i4n         = 3,	f4n         = 3,	f8n         = 3,	moneyn      = 3,
<<
>>
*	daten       = "3/3/77",	c1n         = "3",	t1n         = "3",	char1n      = "3",	v-
archar1n   = "3")	\g
<<
(1 row)
>>
* append	hh015	(	id          = 4,	c20         = "4",	i1          = 4,	i2          = -
4,	i4          = 4,	f4          = 4,
<<
>>
*	f8          = 4,	money       = 4,	date        = "4/4/87",	c1          = "%",	t1   -
       = "%",	char1       = "%",	varchar1    = "%",	i1n         = 4,
<<
>>
*	i2n         = 4,	i4n         = 4,	f4n         = 4,	f8n         = 4,	moneyn      = -
4,
<<
>>
*	daten       = "4/4/87",	c1n         = "%",	t1n         = "%",	char1n      = "%",	v-
archar1n   = "%")	\g
<<
(1 row)
>>
* append	hh015	(	id          = 5,	c20         = "5",	i1          = 5,	i2          = -
5,	i4          = 5,	f4          = 5,
<<
>>
*	f8          = 5,	money       = 5,	date        = "5/5/97",	c1          = "X",	t1   -
       = "X",	char1       = "X",	varchar1    = "X",
<<
>>
*	i1n         = 5,	i2n         = 5,	i4n         = 5,	f4n         = 5,	f8n         = -
5,	moneyn      = 5,
<<
>>
*	daten       = "5/5/97",	c1n         = "X",	t1n         = "X",	char1n      = "X",	v-
archar1n   = "X")	\g
<<
(1 row)
>>
* range of r is hh015 \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
>>
* retrieve (x = concat ( r.c1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (14-FEB-1990 17:36:19)

>>
* retrieve (x = concat ( r.c1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (14-FEB-1990 17:36:42)

>>
* retrieve (x = concat ( r.c1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (14-FEB-1990 17:36:53)

>>
* retrieve (x = concat ( r.c1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (14-FEB-1990 17:36:59)

>>
* retrieve (x = concat ( r.c1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (14-FEB-1990 17:37:19)

>>
* retrieve (x = concat ( r.c1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (14-FEB-1990 17:37:26)

>>
* retrieve (x = concat ( r.c1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (14-FEB-1990 17:37:33)

>>
* retrieve (x = concat ( r.c1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (14-FEB-1990 17:37:41)

>>
* retrieve (x = concat ( r.c1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (14-FEB-1990 17:37:47)

>>
* retrieve (x = concat ( r.c1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (14-FEB-1990 17:37:54)

>>
* retrieve (x = concat ( r.c1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (14-FEB-1990 17:38:02)

>>
* retrieve (x = concat ( r.c1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (14-FEB-1990 17:38:09)

>>
* retrieve (x = concat ( r.char1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:38:18)

>>
* retrieve (x = concat ( r.char1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:38:25)

>>
* retrieve (x = concat ( r.char1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:38:33)

>>
* retrieve (x = concat ( r.char1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:38:39)

>>
* retrieve (x = concat ( r.char1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:38:45)

>>
* retrieve (x = concat ( r.char1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:38:51)

>>
* retrieve (x = concat ( r.char1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:39:00)

>>
* retrieve (x = concat ( r.char1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:39:07)

>>
* retrieve (x = concat ( r.char1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:39:16)

>>
* retrieve (x = concat ( r.char1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:39:29)

>>
* retrieve (x = concat ( r.char1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:39:36)

>>
* retrieve (x = concat ( r.char1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:39:44)

>>
* retrieve (x = concat ( r.t1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:39:51)

>>
* retrieve (x = concat ( r.t1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:39:59)

>>
* retrieve (x = concat ( r.t1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:40:06)

>>
* retrieve (x = concat ( r.t1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:40:14)

>>
* retrieve (x = concat ( r.t1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:40:22)

>>
* retrieve (x = concat ( r.t1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:40:28)

>>
* retrieve (x = concat ( r.t1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:40:33)

>>
* retrieve (x = concat ( r.t1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:40:39)

>>
* retrieve (x = concat ( r.t1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:40:45)

>>
* retrieve (x = concat ( r.t1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:40:51)

>>
* retrieve (x = concat ( r.t1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:40:57)

>>
* retrieve (x = concat ( r.t1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:41:05)

>>
* retrieve (x = concat ( r.varchar1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:41:11)

>>
* retrieve (x = concat ( r.varchar1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:41:16)

>>
* retrieve (x = concat ( r.varchar1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:41:22)

>>
* retrieve (x = concat ( r.varchar1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:41:28)

>>
* retrieve (x = concat ( r.varchar1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:41:33)

>>
* retrieve (x = concat ( r.varchar1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:41:39)

>>
* retrieve (x = concat ( r.varchar1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:41:44)

>>
* retrieve (x = concat ( r.varchar1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:41:51)

>>
* retrieve (x = concat ( r.varchar1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:41:58)

>>
* retrieve (x = concat ( r.varchar1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:42:04)

>>
* retrieve (x = concat ( r.varchar1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:42:10)

>>
* retrieve (x = concat ( r.varchar1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (14-FEB-1990 17:42:17)

>>
* retrieve (x = left ( r.c1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.c1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.c1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.c1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.c1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.c1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.c1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.c1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.c1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.c1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.c1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.c1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.char1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.char1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.char1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.char1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.char1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.char1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.char1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.char1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.char1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.char1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.char1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.char1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.t1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.t1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.t1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.t1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.t1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.t1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.t1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.t1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.t1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.t1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.t1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.t1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.varchar1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.varchar1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.varchar1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.varchar1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.varchar1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.varchar1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.varchar1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.varchar1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.varchar1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.varchar1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.varchar1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = left ( r.varchar1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = locate ( r.c1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1n , r.i1 )) \g    
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.char1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.t1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.varchar1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = right ( r.c1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.c1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.c1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.c1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.c1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.c1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.c1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.c1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.c1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.c1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.c1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.c1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.char1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.char1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.char1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.char1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.char1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.char1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.char1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.char1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.char1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.char1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.char1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.char1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.t1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.t1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.t1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.t1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.t1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.t1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.t1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.t1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.t1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.t1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.t1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.t1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.varchar1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.varchar1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.varchar1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.varchar1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.varchar1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.varchar1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.varchar1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.varchar1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.varchar1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.varchar1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.varchar1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = right ( r.varchar1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|a     |
|B     |
|3     |
|%     |
|X     |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.c1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.c1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.c1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.c1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.c1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.c1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.c1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.c1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.c1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.c1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.c1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.c1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.char1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.char1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.char1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.char1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.char1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.char1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.char1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.char1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.char1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.char1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.char1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.char1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.t1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.t1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.t1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.t1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.t1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.t1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.t1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.t1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.t1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.t1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.t1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.t1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.varchar1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.varchar1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.varchar1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.varchar1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.varchar1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.varchar1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.varchar1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.varchar1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.varchar1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.varchar1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.varchar1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* retrieve (x = shift ( r.varchar1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes 
*/
<<

+------+
|x     |
+------+
|      |
|      |
|      |
|      |
|      |
+------+
(5 rows)
>>
* \q
<<
>>


Ending at: Mon Jul  6 18:23:15 2009
