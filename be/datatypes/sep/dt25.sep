/*
Copyright (c) 2007 Ingres Corporation

	Test Name    : dt25.sep (formerly hha25.sep)
	User Name    : testenv      
	Test ID      : dt25.sep
	Module       : be/datatypes
	Purpose	     : Tests string functions (2 param) with 6.0 datatypes.
	Input Files  : none
	Output Files : none
	Database     : SEPPARAMDB2
	Tables       : hh025
	Synopsis     : Tests string functions (2 param) with 6.0 datatypes.

	History	: 05-july-1989	Created		Author

                        converted by :dennisk             
                 7/90	Test modified to conform to Test Case/
                        Portability Standards.
	  05-Jun-1992	modified by Paul Park
			added alt canons for locate() running with
			udt dbms server.
          02-Nov-1992	(gillnh2o) 
			This test was always diff'ing and the diff tolerance
			level was being reached causing the test to always
			abort. The reason for the diff was due to the return
			message for the locate() function. I accepted an
			alternate canon for each of the locate() functions that
			was causing a diff against a udt server. I tested
			against a udt server and a non-udt server. Test run on a
			Sun platform and a VMS platform. I also fixed the test
			name from hh0 to hha.
	  12-Aug-1993	(sandhya) 
			Removed the hardcoded dbname from the comments section.
			Accepted 47 new canons for error messages from the
			string function locate() as it has changed for 6.5.
          05-Sep-1996	(Author)
	  23-Mar-1999   (vande02) 
			Hard-coded VPG_SZ to 4K and added empty canon after
			'quel SEPPARAMDB1 -s' if the test db does not exist, you
			will see the msg."TM could not connect". 
	  30-Jan-2003	(hanch04) 
			Updated canons to match Ingres 2.6/0303 Service Pack 2
          04-Feb-2003	(hanch04) 
			Update to run again 2.6/0303 and previous SP
          12-May-2003	(shafa01) 
			Removed canons specific to Ingres 2.6 SP1, 'E_US0B5C
			line 1, Function 'locate' is not defined for arguments
			of type 'c' and 'integer'. Explicitly convert its
			arguments  to the desired type(s). Test will work with
			Ingres 2.6 SP2. Lined up the history comments.
          25-Jun-2004   (vande02) Cleaning up and aligning history comments.
           5-Jun-2007   (vande02) Replaced all canons for the 'locate' function
                        with new expected E_US0B5C message.  Development
                        confirmed this is expected as of Ingres 2006 Release 3.

                        Made header corrections.
           6-Jul-2009	(wanfr01) Added canons for installations with udts
                        HOQA is run on VMS with UDTS installed, causing errors.
          23-Mar-2010   (hanal04) Invalid types in LOCATE() are now logged as
                        E_US1072.
*/
? quel SEPPARAMDB2 -s 
<<

>>
* destroy hh025	\g
<<
~
>>
* create  hh025	(	id          = i2,	c20         = c20,	i1          = i1,	i2         -
 = i2,	i4          = i4,	f4          = f4,
<<
>>
*	f8          = f8,	money       = money,	date        = date,	c1          = c4,	t1   -
       = text(4),	char1       = char(4),	varchar1    = varchar(4),
<<
>>
*	i1n         = i1	 with null,	i2n         = i2	 with null,	i4n         = i4	 with n-
ull,	f4n         = f4	 with null,	f8n         = f8	 with null,	moneyn      = money	 -
with null,
<<
>>
*	daten       = date	 with null,	c1n         = c4	 with null,	t1n         = text(4)	-
 with null,	char1n      = char(4)	 with null,	varchar1n   = varchar(4) with null) wi-
th page_size=4096	\g
<<
>>
* append	hh025	(	id          = 1,	c20         = "1",	i1          = 1,	i2          = -
1,	i4          = 1,	f4          = 1,	f8          = 1,	money       = 1,
<<
>>
*	date        = "5/5/97",	c1          = "w234",	t1          = "w234",	char1       = -
"w234",	varchar1    = "w234") \g
<<
(1 row)
>>
* append	hh025	(	id          = 2,	c20         = "2",	i1          = 2,	i2          = -
2,	i4          = 2,	f4          = 2,	f8          = 2,	money       = 2,
<<
>>
*	date        = "6/6/2007",	c1          = "X234",	t1          = "X234",	char1       -
= "X234",	varchar1    = "X234",	i1n	    = 2,	i2n	    = 2,	i4n	    = 2,
<<
>>
*	f4n	    = 2,	f8n	    = 2,	moneyn      = 2,	daten       = "6/6/2007",	c1n         =-
 "X234",	t1n         = "X234",	char1n      = "X234",	varchar1n   = "X234") \g
<<
(1 row)
>>
* append	hh025	(	id          = 3,	C20         = "3",	I1          = 3,	I2          = -
3,	i4          = 3,	f4          = 3,	f8          = 3,	money       = 3,
<<
>>
*	date        = "7/7/2017",	c1          = "y234",	t1          = "y234",	char1       -
= "y234",	varchar1    = "y234") \g
<<
(1 row)
>>
* append	hh025	(	id          = 4,	c20         = "4",	I1          = 4,	I2          = -
4,	i4          = 4,	f4          = 4,	f8          = 4,	money       = 4,
<<
>>
*	date        = "8/8/2027",	c1          = "Z234",	t1          = "Z234",	char1       -
= "Z234",	varchar1    = "Z234",	i1n         = 4,	I2n         = 4,	i4n         = 4,
<<
>>
*	f4n         = 4,	f8n         = 4,	moneyn      = 4,	daten       = "8/8/2027",	c1n  -
       = "Z234",	t1n         = "Z234",	char1n      = "Z234",	varchar1n   = "Z234") \-
g
<<
(1 row)
>>
* range of r is hh025 \g
<<
>>
* retrieve (x = concat ( r.c1 , r.i1 )) \g
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (27-FEB-1990 10:05:47)

>>
* retrieve (x = concat ( r.c1 , r.i1n )) \g
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (27-FEB-1990 10:06:04)

>>
* retrieve (x = concat ( r.c1 , r.i2 )) \g
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (27-FEB-1990 10:06:14)

>>
* retrieve (x = concat ( r.c1 , r.i2n )) \g
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (27-FEB-1990 10:06:26)

>>
* retrieve (x = concat ( r.c1 , r.i4 )) \g
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (27-FEB-1990 10:06:37)

>>
* retrieve (x = concat ( r.c1 , r.i4n )) \g
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (27-FEB-1990 10:06:58)

>>
* retrieve (x = concat ( r.c1n , r.i1 )) \g
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (27-FEB-1990 10:07:12)

>>
* retrieve (x = concat ( r.c1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (27-FEB-1990 10:07:26)

>>
* retrieve (x = concat ( r.c1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (27-FEB-1990 10:07:37)

>>
* retrieve (x = concat ( r.c1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (27-FEB-1990 10:07:45)

>>
* retrieve (x = concat ( r.c1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (27-FEB-1990 10:07:55)

>>
* retrieve (x = concat ( r.c1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'c' and 'integer'. Explicitly convert its arguments to the desired type(s).
    (27-FEB-1990 10:08:06)

>>
* retrieve (x = concat ( r.char1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:08:16)

>>
* retrieve (x = concat ( r.char1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:08:30)

>>
* retrieve (x = concat ( r.char1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:10:52)

>>
* retrieve (x = concat ( r.char1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:11:20)

>>
* retrieve (x = concat ( r.char1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:11:34)

>>
* retrieve (x = concat ( r.char1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:12:10)

>>
* retrieve (x = concat ( r.char1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:12:19)

>>
* retrieve (x = concat ( r.char1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:12:35)

>>
* retrieve (x = concat ( r.char1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:12:58)

>>
* retrieve (x = concat ( r.char1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:13:08)

>>
* retrieve (x = concat ( r.char1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:13:29)

>>
* retrieve (x = concat ( r.char1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'char' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:13:48)

>>
* retrieve (x = concat ( r.t1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:15:14)

>>
* retrieve (x = concat ( r.t1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:15:33)

>>
* retrieve (x = concat ( r.t1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:15:52)

>>
* retrieve (x = concat ( r.t1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:20:58)

>>
* retrieve (x = concat ( r.t1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:21:07)

>>
* retrieve (x = concat ( r.t1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:21:23)

>>
* retrieve (x = concat ( r.t1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:21:55)

>>
* retrieve (x = concat ( r.t1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:22:11)

>>
* retrieve (x = concat ( r.t1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:22:35)

>>
* retrieve (x = concat ( r.t1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:22:52)

>>
* retrieve (x = concat ( r.t1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:23:27)

>>
* retrieve (x = concat ( r.t1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'text' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:23:40)

>>
* retrieve (x = concat ( r.varchar1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:23:51)

>>
* retrieve (x = concat ( r.varchar1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:24:17)

>>
* retrieve (x = concat ( r.varchar1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:24:56)

>>
* retrieve (x = concat ( r.varchar1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:28:34)

>>
* retrieve (x = concat ( r.varchar1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:29:26)

>>
* retrieve (x = concat ( r.varchar1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:29:43)

>>
* retrieve (x = concat ( r.varchar1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:30:01)

>>
* retrieve (x = concat ( r.varchar1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:30:20)

>>
* retrieve (x = concat ( r.varchar1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:30:54)

>>
* retrieve (x = concat ( r.varchar1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:31:01)

>>
* retrieve (x = concat ( r.varchar1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:31:14)

>>
* retrieve (x = concat ( r.varchar1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US0B5C line 1, Function 'concat' is not defined for arguments of type
    'varchar' and 'integer'. Explicitly convert its arguments to the desired
    type(s).
    (27-FEB-1990 10:33:53)

>>
* retrieve (x = left ( r.c1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|w     |
|X2    |
|y23   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.c1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.c1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|w     |
|X2    |
|y23   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.c1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.c1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|w     |
|X2    |
|y23   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.c1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.c1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.c1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.c1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.c1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.c1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.c1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.char1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|w     |
|X2    |
|y23   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.char1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.char1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|w     |
|X2    |
|y23   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.char1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.char1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|w     |
|X2    |
|y23   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.char1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.char1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.char1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.char1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.char1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.char1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.char1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.t1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|w     |
|X2    |
|y23   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.t1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.t1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|w     |
|X2    |
|y23   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.t1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.t1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|w     |
|X2    |
|y23   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.t1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.t1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.t1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.t1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.t1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.t1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.t1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.varchar1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|w     |
|X2    |
|y23   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.varchar1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.varchar1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|w     |
|X2    |
|y23   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.varchar1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.varchar1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|w     |
|X2    |
|y23   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.varchar1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.varchar1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.varchar1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.varchar1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.varchar1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.varchar1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = left ( r.varchar1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|X2    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = locate ( r.c1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.c1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.char1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.char1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.t1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.t1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
* retrieve (x = locate ( r.varchar1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = locate ( r.varchar1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<
E_US1072 The locate() function does not accept non-string parameters.
    Explicitly convert parameters with non-string types to parameters with
    string types.
    (Wed Mar 24 11:43:55 2010)

>>
<<
Terminating '}' not found.  Integer list format is {e1, ...}.

>>
* retrieve (x = right ( r.c1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|4     |
|34    |
|234   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.c1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.c1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|4     |
|34    |
|234   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.c1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.c1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|4     |
|34    |
|234   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.c1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.c1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.c1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.c1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.c1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.c1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.c1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.char1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|4     |
|34    |
|234   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.char1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.char1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|4     |
|34    |
|234   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.char1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.char1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|4     |
|34    |
|234   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.char1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.char1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.char1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.char1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.char1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.char1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.char1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.t1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|4     |
|34    |
|234   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.t1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.t1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|4     |
|34    |
|234   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.t1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.t1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|4     |
|34    |
|234   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.t1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.t1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.t1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.t1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.t1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.t1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.t1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.varchar1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|4     |
|34    |
|234   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.varchar1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.varchar1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|4     |
|34    |
|234   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.varchar1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.varchar1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|4     |
|34    |
|234   |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.varchar1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.varchar1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.varchar1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.varchar1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.varchar1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.varchar1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = right ( r.varchar1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|34    |
|      |
|Z234  |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.c1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
| w23  |
|  X2  |
|   y  |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.c1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.c1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
| w23  |
|  X2  |
|   y  |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.c1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.c1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
| w23  |
|  X2  |
|   y  |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.c1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.c1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.c1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.c1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.c1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.c1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.c1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.char1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
| w23  |
|  X2  |
|   y  |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.char1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.char1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
| w23  |
|  X2  |
|   y  |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.char1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.char1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
| w23  |
|  X2  |
|   y  |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.char1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.char1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.char1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.char1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.char1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.char1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.char1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.t1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
| w23  |
|  X2  |
|   y  |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.t1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.t1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
| w23  |
|  X2  |
|   y  |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.t1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.t1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
| w23  |
|  X2  |
|   y  |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.t1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.t1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.t1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.t1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.t1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.t1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.t1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.varchar1 , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
| w23  |
|  X2  |
|   y  |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.varchar1 , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.varchar1 , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
| w23  |
|  X2  |
|   y  |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.varchar1 , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.varchar1 , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
| w23  |
|  X2  |
|   y  |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.varchar1 , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.varchar1n , r.i1 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.varchar1n , r.i1n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.varchar1n , r.i2 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.varchar1n , r.i2n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.varchar1n , r.i4 )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* retrieve (x = shift ( r.varchar1n , r.i4n )) \g
/*
tests string functions (2 param) with 6.0 datatypes  
*/
<<

+------+
|x     |
+------+
|      |
|  X2  |
|      |
|      |
+------+
(4 rows)
>>
* \q
<<
>>


Ending at: Mon Jul  6 18:26:07 2009
