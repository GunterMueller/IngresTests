/*
Copyright (c) 2007 Ingres Corporation

	Test Name: dt45.sep
	Time: Wed Jan 22 11:42:40 2003
	User Name: ingres
	Terminal type: septerm
 
	Test ID : dt45.sep
	Module  : 
	Filename:
	Purpose	: This test will test the decimal(expr) Data Type Conversion
                  Function.
	Input Files  : drop.sql, tables_setup.sql, insert_test.sql
	Output Files : None
	Database     : datatypedb
	Tables       : tbl_dt45_a, tbl_dt45_b
	Synopsis     : This test will check that the decimal data type
		       conversion function can be passed data from another
	               conversion function and from a table with data which is
                       supported. Destructive testing is performed in a similar
		       manner with unsupported data. The decimal function is
		       also tested with the -, +, * and / operands.

 History: 22-Jan-2003	(shafa01) Created
          20-FEB-2003	(Author)
           1-Nov-2006	(vande02) Updated expected E_US0B5B or E_US0B5C messages
                                  from invalid syntax with the date data type.
                                  Added copyright.
          18-Jun-2007   (vande02) Replaced 2 canons for decimal and division
				  test case due to new decimal precision max
				  being (39) as of 2006r3.  The new 2006r3
				  result has 8 more digits right of the decimal.
                                  Tracked by QA issue 119135. Updated copyright.
*/
/*	
	This fill file is used to initialize the database by dropping the
	tables that will be used in the test.
*/
? fill drop.sql 
!!
drop tbl_dt45_a\p\g
drop tbl_dt45_b\p\g
!!
/*
	This fill file is used to setup the required tables for this test.
*/
? fill tables_setup.sql 
!!
create table tbl_dt45_a(c_byte byte(10) default NULL,c_byte_varying byte varying(10)-
 default NULL,c_c c10 default NULL,c_char char(10) default NULL,c_date date default -
NULL,c_decimal decimal(8,3) default NULL,c_float float default NULL,c_float4 f4 defa-
ult NULL,c_int1 i1 default NULL,c_int2 smallint default NULL,c_int4 integer default -
NULL,c_integer integer default NULL,c_long_byte long byte,c_long_varchar long varcha-
r,c_money money default NULL,c_object_key object_key default NULL, c_table_key table-
_key default NULL,c_text text(10) default NULL,c_varchar varchar(10) default NULL)\g

Insert into tbl_dt45_a (c_byte, c_byte_varying, c_c, c_char, c_date, c_decimal, c_fl-
oat, c_float4, c_int1, c_int2, c_int4, c_integer, c_long_byte, c_long_varchar, c_mon-
ey, c_object_key, c_table_key, c_text, c_varchar) VALUES ('12345.678', '12345.678', -
'12345.678', '12345.678', '100103', 12345.678, 12345.678, 12345.678, 127, 32767, 214-
7483647, 2147483647, '12345.678', '12345.678', 999999999999.923, '12345678.1234567',-
 '1234.567', '12345.678', '12345.678')\g

create table tbl_dt45_b(c_decimal decimal(15,3) default NULL, from_data_type char(40-
) default NULL)\g
!!
/*
	This fill file executes certain insert and update commands specific to a
	test case performed later into the test.
*/
? fill insert_test.sql 
!!
insert into tbl_dt45_b (c_decimal) select decimal(c_byte,8,3) from tbl_dt45_a\g
update tbl_dt45_b set from_data_type='Converted from byte' where from_data_type is N-
ULL\g
insert into tbl_dt45_b (c_decimal) select decimal(c_byte_varying,8,3) from tbl_dt45_-
a\g
update tbl_dt45_b set from_data_type='Converted from byte varying' where from_data_t-
ype is NULL\g
insert into tbl_dt45_b (c_decimal) select decimal(c_c,8,3) from tbl_dt45_a\g
update tbl_dt45_b set from_data_type='Converted from c' where from_data_type is NULL-
\g
insert into tbl_dt45_b (c_decimal) select decimal(c_char,8,3) from tbl_dt45_a\g
update tbl_dt45_b set from_data_type='Converted from char' where from_data_type is N-
ULL\g
insert into tbl_dt45_b (c_decimal) select decimal(c_decimal,8,3) from tbl_dt45_a\g
update tbl_dt45_b set from_data_type='Converted from decimal' where from_data_type i-
s NULL\g
insert into tbl_dt45_b (c_decimal) select decimal(c_float,8,3) from tbl_dt45_a\g
update tbl_dt45_b set from_data_type='Converted from float' where from_data_type is -
NULL\g
insert into tbl_dt45_b (c_decimal) select decimal(c_float4,8,3) from tbl_dt45_a\g
update tbl_dt45_b set from_data_type='Converted from float4' where from_data_type is-
 NULL\g
insert into tbl_dt45_b (c_decimal) select decimal(c_int1,6,3) from tbl_dt45_a\g
update tbl_dt45_b set from_data_type='Converted from int1' where from_data_type is N-
ULL\g
insert into tbl_dt45_b (c_decimal) select decimal(c_int2,8,3) from tbl_dt45_a\g
update tbl_dt45_b set from_data_type='Converted from int2' where from_data_type is N-
ULL\g
insert into tbl_dt45_b (c_decimal) select decimal(c_int4,13,3) from tbl_dt45_a\g
update tbl_dt45_b set from_data_type='Converted from int4' where from_data_type is N-
ULL\g
insert into tbl_dt45_b (c_decimal) select decimal(c_money,15,3) from tbl_dt45_a\g
update tbl_dt45_b set from_data_type='Converted from money' where from_data_type is -
NULL\g
insert into tbl_dt45_b (c_decimal) select decimal(c_text,8,3) from tbl_dt45_a\g
update tbl_dt45_b set from_data_type='Converted from text' where from_data_type is N-
ULL\g
insert into tbl_dt45_b (c_decimal) select decimal(c_varchar,8,3) from tbl_dt45_a\g
update tbl_dt45_b set from_data_type='Converted from varchar' where from_data_type i-
s NULL\g
!!
/*
	In this section of the test the decmal function (primary) is calling
	another function (secondary) within it, which first converts the data
	to the respective data type (supported by decimal) and further converts
	to type decimal. Decimal does not have a maximum or a minimum value and
	so I have used a variety of positive and negative values throughout the
	test. 
*/
? sql -s SEPPARAMDB 
<<
>>
* select decimal(byte('12345.678'),8,3)\g 
<<

+-----------+
|col1       |
+-----------+
|  12345.678|
+-----------+
(1 row)
>>
* select decimal(byte('-12345.678'),8,3)\g 
<<

+-----------+
|col1       |
+-----------+
| -12345.678|
+-----------+
(1 row)
>>
* select decimal(varbyte('12345.678'),8,3)\g 
<<

+-----------+
|col1       |
+-----------+
|  12345.678|
+-----------+
(1 row)
>>
* select decimal(varbyte('-12345.678'),8,3)\g 
<<

+-----------+
|col1       |
+-----------+
| -12345.678|
+-----------+
(1 row)
>>
* select decimal(c('12345.678'),8,3)\g 
<<

+-----------+
|col1       |
+-----------+
|  12345.678|
+-----------+
(1 row)
>>
* select decimal(c('-12345.678'),8,3)\g 
<<

+-----------+
|col1       |
+-----------+
| -12345.678|
+-----------+
(1 row)
>>
* select decimal(char('12345.678'),8,3)\g 
<<

+-----------+
|col1       |
+-----------+
|  12345.678|
+-----------+
(1 row)
>>
* select decimal(char('-12345.678'),8,3)\g 
<<

+-----------+
|col1       |
+-----------+
| -12345.678|
+-----------+
(1 row)
>>
* select decimal(decimal(12345.678,8,3),8,3)\g 
<<

+-----------+
|col1       |
+-----------+
|  12345.678|
+-----------+
(1 row)
>>
* select decimal(decimal(-12345.678,8,3),8,3)\g 
<<

+-----------+
|col1       |
+-----------+
| -12345.678|
+-----------+
(1 row)
>>
/*
	Float8 is synonymous to Float and since there is no function called
        float, the float8 function is used instead.
*/
* select decimal(float8(12345.678),8,3)\g 
<<

+-----------+
|col1       |
+-----------+
|  12345.678|
+-----------+
(1 row)
>>
* select decimal(float8(-12345.678),8,3)\g 
<<

+-----------+
|col1       |
+-----------+
| -12345.678|
+-----------+
(1 row)
>>
* select decimal(float4(12345.678),8,3)\g 
<<

+-----------+
|col1       |
+-----------+
|  12345.677|
+-----------+
(1 row)
>>
<< IF (VMS) 

+----------+
|col1      |
+----------+
| 12345.678|
+----------+
(1 row)
>>
* select decimal(float4(-12345.678),8,3)\g 
<<

+-----------+
|col1       |
+-----------+
| -12345.677|
+-----------+
(1 row)
>>
<< IF (VMS) 

+----------+
|col1      |
+----------+
|-12345.678|
+----------+
(1 row)
>>
* select decimal(int1(127),6,3)\g 
<<

+-----------+
|col1       |
+-----------+
|    127.000|
+-----------+
(1 row)
>>
* select decimal(int1(-128),6,3)\g 
<<

+-----------+
|col1       |
+-----------+
|   -128.000|
+-----------+
(1 row)
>>
* select decimal(int2(32767),8,3)\g 
<<

+-----------+
|col1       |
+-----------+
|  32767.000|
+-----------+
(1 row)
>>
* select decimal(int2(-32768),8,3)\g 
<<

+-----------+
|col1       |
+-----------+
| -32768.000|
+-----------+
(1 row)
>>
* select decimal(int4(2147483647),13,3)\g 
<<

+---------------+
|col1           |
+---------------+
| 2147483647.000|
+---------------+
(1 row)
>>
* select decimal(int4(-2147483648),13,3)\g 
<<

+---------------+
|col1           |
+---------------+
|-2147483648.000|
+---------------+
(1 row)
>>
* select decimal(money(999999999999.99),14,2)\g 
<<

+-----------------+
|col1             |
+-----------------+
|  999999999999.99|
+-----------------+
(1 row)
>>
* select decimal(money(-999999999999.99),14,2)\g 
<<

+-----------------+
|col1             |
+-----------------+
| -999999999999.99|
+-----------------+
(1 row)
>>
* select decimal(text('12345.678'),8,3)\g 
<<

+-----------+
|col1       |
+-----------+
|  12345.678|
+-----------+
(1 row)
>>
* select decimal(text('-12345.678'),8,3)\g 
<<

+-----------+
|col1       |
+-----------+
| -12345.678|
+-----------+
(1 row)
>>
* select decimal(varchar('12345.678'),8,3)\g 
<<

+-----------+
|col1       |
+-----------+
|  12345.678|
+-----------+
(1 row)
>>
* select decimal(varchar('-12345.678'),8,3)\g 
<<

+-----------+
|col1       |
+-----------+
| -12345.678|
+-----------+
(1 row)
>>
/*
	In this section of the test the decimal function in tested against the
	non-supported data types. Testing procedure is similar to that preformed
	above.
*/
* select decimal(date('100103'),6,0)\g 
<<
E_US0B5C line 1, Function 'decimal' is not defined for arguments of type
    'ingresdate' and 'integer'. Explicitly convert its arguments to the
    desired type(s).
    (Wed Nov  1 15:25:56 2006)

>>
* select decimal(long_byte(12345.678),8,3)\g 
<<
E_US0B5C line 1, Function 'decimal' is not defined for arguments of type
    'long byte' and 'integer'. Explicitly convert its arguments to the
    desired type(s).
    (Tue Jan 28 13:19:32 2003)
>>
* select decimal(long_varchar('12345.678'),8,3)\g 
<<
E_US0B5C line 1, Function 'decimal' is not defined for arguments of type
    'long varchar' and 'integer'. Explicitly convert its arguments to the
    desired type(s).
    (Tue Jan 28 13:48:26 2003)

>>
* select decimal(table_key('1234.567'),7,3)\g
<<

E_US0B5C line 1, Function 'decimal' is not defined for arguments of type
    'table_key' and 'integer'. Explicitly convert its arguments to the
    desired type(s).
    (Tue Feb 18 11:02:54 2003)
>>
* select decimal(object_key('12345678.1234567'),15,7)\g
<<

E_US0B5C line 1, Function 'decimal' is not defined for arguments of type
    'object_key' and 'integer'. Explicitly convert its arguments to the
    desired type(s).
    (Tue Feb 18 11:03:29 2003)
>>
/*	
	In this section of the test I check for appropriate error
	messages when precision and scale are not provided for the
	following data types shown below.
*/
* select decimal(byte('12345.678'))\g
<<

E_PS0C80 No default values are provided for the decimal() conversion
    function when a value with datatype `byte' is given as the first parameter.
    Explicitly specify precision and scale.
    (Wed Jan 29 10:46:08 2003)
>>
* select decimal(varbyte('12345.678'))\g
<<

E_PS0C80 No default values are provided for the decimal() conversion
    function when a value with datatype `byte varying' is given as the first
    parameter.  Explicitly specify precision and scale.
    (Wed Jan 29 10:50:06 2003)
>>
* select decimal(c('12345.678'))\g
<<

E_PS0C80 No default values are provided for the decimal() conversion
    function when a value with datatype `c' is given as the first parameter.
    Explicitly specify precision and scale.
    (Wed Jan 29 10:50:38 2003)
>>
* select decimal(char('12345.678'))\g
<<

E_PS0C80 No default values are provided for the decimal() conversion
    function when a value with datatype `char' is given as the first parameter.
    Explicitly specify precision and scale.
    (Wed Jan 29 10:51:08 2003)
>>
* select decimal(text('12345.678'))\g
<<
E_PS0C80 No default values are provided for the decimal() conversion
    function when a value with datatype `text' is given as the first parameter.
    Explicitly specify precision and scale.
    (Wed Jan 29 10:54:34 2003)
>>
* select decimal(varchar('12345.678'))\g
<<

E_PS0C80 No default values are provided for the decimal() conversion
    function when a value with datatype `varchar' is given as the first
    parameter.  Explicitly specify precision and scale.
    (Wed Jan 29 10:55:12 2003)
>>
/*
	In this section of the test I perform various combinations of
	calculations using the -, +, * and / operands.
*/
* select decimal(12345.678,8,3) - decimal(11111.111,8,3)\g 
<<

+-----------+
|col1       |
+-----------+
|   1234.567|
+-----------+
(1 row)
>>
* select decimal(12345.678,8,3) - decimal(-11111.111,8,3)\g 
<<

+-----------+
|col1       |
+-----------+
|  23456.789|
+-----------+
(1 row)
>>
* select decimal(12345.678,8,3) + decimal(11111.111,8,3)\g 
<<

+-----------+
|col1       |
+-----------+
|  23456.789|
+-----------+
(1 row)
>>
* select decimal(-12345.678,8,3) + decimal(-11111.111,8,3)\g
<<

+-----------+
|col1       |
+-----------+
| -23456.789|
+-----------+
(1 row)
>>
* select decimal(12345.678,8,3) * decimal(11111.111,8,3)\g 
<<

+-----------------+
|col1             |
+-----------------+
| 137174198.628258|
+-----------------+
(1 row)
>>
* select decimal(-12345.678,8,3) * decimal(11111.111,8,3)\g 
<<

+------------------+
|col1              |
+------------------+
| -137174198.628258|
+------------------+
(1 row)
>>
* select decimal(12345.678,8,3) / decimal(11111.111,8,3)\g 
<<

+-----------------------------------------+
|col1                                     |
+-----------------------------------------+
|        1.1111110311111103111111031111110|
+-----------------------------------------+
(1 row)
>>
* select decimal(12345.678,8,3) / decimal(-11111.111,8,3)\g 
<<

+-----------------------------------------+
|col1                                     |
+-----------------------------------------+
|       -1.1111110311111103111111031111110|
+-----------------------------------------+
(1 row)
>>
/*
	In the following section the required tables for this test are created
        and then inserted with data to be tested with the decimal conversion
        function. Please refer to the fill file table_setup.sql for more detail.
*/
* \i drop.sql
<<
~
>>
* \i tables_setup.sql 
<<
(1 row)
>>
/*
	In the following section, values from selected columns of table
        tbl_dt45_a are passed through the decimal conversion function, which
	in turn are then inserted into the c_decimal column of table
	tbl_dt45_b. The from_data_type column of table tbl_dt45_b shows
	what data type the c_decimal data was converted from. Please refer to
	the fill file insert_test.sql for more detail.
*/
* \i insert_test.sql
<<
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
(1 row)
>>
* select * from tbl_dt45_b\p\g
<<
select * from tbl_dt45_b


+-----------------------------------------------------------------------+
|c_decimal                     |from_data_type                          |
+------------------------------+----------------------------------------+
|                     12345.678|Converted from byte                     |
|                     12345.678|Converted from byte varying             |
|                     12345.678|Converted from c                        |
|                     12345.678|Converted from char                     |
|                     12345.678|Converted from decimal                  |
|                     12345.678|Converted from float                    |
|                     12345.677|Converted from float4                   |
|                       127.000|Converted from int1                     |
|                     32767.000|Converted from int2                     |
|                2147483647.000|Converted from int4                     |
|              999999999999.920|Converted from money                    |
|                     12345.678|Converted from text                     |
|                     12345.678|Converted from varchar                  |
+-----------------------------------------------------------------------+
(13 rows)
>>
<< IF (VMS) 
 select * from tbl_dt45_b

+-----------------+----------------------------------------+
|c_decimal        |from_data_type                          |
+-----------------+----------------------------------------+
|        12345.678|Converted from byte                     |
|        12345.678|Converted from byte varying             |
|        12345.678|Converted from c                        |
|        12345.678|Converted from char                     |
|        12345.678|Converted from decimal                  |
|        12345.678|Converted from float                    |
|        12345.678|Converted from float4                   |
|          127.000|Converted from int1                     |
|        32767.000|Converted from int2                     |
|   2147483647.000|Converted from int4                     |
| 999999999999.920|Converted from money                    |
|        12345.678|Converted from text                     |
|        12345.678|Converted from varchar                  |
+-----------------+----------------------------------------+
(13 rows)
>>
/*
	Preforming similar steps to that in the insert_test.sql fill file for
        the non-supported data types.
*/
* insert into tbl_dt45_b (c_decimal) select decimal(c_long_byte,8,3) from tbl_dt45_a-
\p\g
<<

 insert into tbl_dt45_b (c_decimal) select decimal(c_long_byte,8,3) from tbl_dt45_a
E_US0B5C line 1, Function 'decimal' is not defined for arguments of type
    'long byte' and 'integer'. Explicitly convert its arguments to the
    desired type(s).
    (Tue Jan 28 15:53:10 2003)
>>
* insert into tbl_dt45_b (c_decimal) select decimal(c_long_varchar,8,3) from tbl_dt4-
5_a\p\g
<<

 insert into tbl_dt45_b (c_decimal) select decimal(c_long_varchar,8,3) from tbl_dt45-
_a
E_US0B5C line 1, Function 'decimal' is not defined for arguments of type
    'long varchar' and 'integer'. Explicitly convert its arguments to the
    desired type(s).
    (Tue Jan 28 15:53:13 2003)
>>
* insert into tbl_dt45_b (c_decimal) select decimal(c_date,6,0) from tbl_dt45_a\p\g
<<
 insert into tbl_dt45_b (c_decimal) select decimal(c_date,6,0) from tbl_dt45_a
E_US0B5C line 1, Function 'decimal' is not defined for arguments of type
    'ingresdate' and 'integer'. Explicitly convert its arguments to the
    desired type(s).
    (Wed Nov  1 15:26:04 2006)

>>
* insert into tbl_dt45_b (c_decimal) select decimal(c_object_key,15,3) from tbl_dt45-
_a\g
<<

E_US0B5C line 1, Function 'decimal' is not defined for arguments of type
    'object_key' and 'integer'. Explicitly convert its arguments to the
    desired type(s).
    (Tue Feb 18 11:03:29 2003)
>>
* insert into tbl_dt45_b (c_decimal) select decimal(c_table_key,7,3) from tbl_dt45_a-
\g
<<

E_US0B5C line 1, Function 'decimal' is not defined for arguments of type
    'table_key' and 'integer'. Explicitly convert its arguments to the
    desired type(s).
    (Tue Feb 18 11:02:54 2003)
>>
* \i drop.sql
<<
drop tbl_dt45_a
drop tbl_dt45_b
>>
* \q 
<<
>>


Ending at: Mon Jun 18 18:11:56 2007
