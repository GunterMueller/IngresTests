/*
Copyright (c) 2008 Ingres Corporation

	Test Name: dt37.sep
	Time: Thu Apr 19 12:56:53 2001
	User Name: testenv
	Terminal type: septerm
 
	Test ID : dt37.sep 
	Module  : be/datatypes
	Filename: dt37.sep
	Purpose	: To test the maximum size of 32K for character data type
                  in a default instance and test maximum size of 16K in UTF8.
	Input Files  : chartype.sc
	Output Files : chartype.exe
	Database     : datatypedb2
	Tables       : dt37_table
	Synopsis     : This sep test is to test the character data type 'char' 
                       with the maximum size of 32K bytes column. And using
                       various string functions to retrieve the data from the 
                       table.

 History: 19-Apr-2001	(wu$ca01) Created
           5-Nov-2008   (vande02) The test program was changed to accept an
                                  additional argument SEPPARAM_CHARSET and set
                                  the max column size to 16K for UTF8 or 32K
                                  (default) for non-UTF8.  Conditional canon
                                  for UTF8 was also created.  Removed one query
                                  which was locating the '31991'th character
                                  which is invalid for UTF8.  Modified some of
                                  the queries slightly so the results would be
                                  consistent for UTF8 and non-UTF8.
*/
? fill chartype.sc 
!!
/* This program is to test the 'char' character data type with the maximum size
** of 32K bytes per column, and the retrieval of the data using various string
** functions.
*/
 
#include <stdio.h>
exec sql include sqlca;

#define MAXVCSZ 32000
#define MAXUTF8SZ 16000

main(int argc, char* argv[])
{
    exec sql begin declare section;
      char   *dbname;
	varchar struct {
	    short	buf_size;
	    char	buf[MAXVCSZ+1];
	} vch;

	varchar struct {
	    short	buf_size;
	    char	buf[MAXVCSZ+1];
	} vch2;
    int vcsz;
    char  *charset;
    char stmtbuff[256];
    exec sql end declare section;

    exec sql whenever sqlerror call sqlprint;

    dbname = argv[1];
    charset = argv[2];
    if (strcmp(charset, "UTF8") == 0)
      vcsz = MAXUTF8SZ;
    else
      vcsz = MAXVCSZ;

    exec sql connect :dbname;
    /* Ignore errors from drop table */
    exec sql whenever sqlerror continue;
    exec sql drop table dt37_table;

    exec sql whenever sqlerror call sqlprint;
    sprintf(stmtbuff, "create table dt37_table(col_char char(%d))", vcsz);
    exec sql execute immediate :stmtbuff;

    /* To set all the bytes in a block of memory with the character '$' */
    memset(vch.buf, '$', vcsz);
    vch.buf_size = vcsz;
    /* Between the 2nd through 11th character, change the character to '8' */
    memset(vch.buf+1, '8', 10);
    /* Replace the last 10 characters 'p' */
    memset(vch.buf+vcsz-10, 'p', 10);

    exec sql insert into dt37_table values (:vch);

    exec sql select col_char into :vch2 from dt37_table;

    /* If the table is successfully created, print success. Follow by */
    /* testing various string functions. Otherwise, print failure. */ 
    if (vch.buf_size == vch2.buf_size &&
	memcmp(vch.buf, vch2.buf, vcsz) == 0)
    {
        printf("Success!!!\n");

        printf("Test the left() function.\n"); 
        printf("Query:select varchar(left(col_char, 20), 60) from dt37_table.\n");
        /* All the string functions are enclosed by a varchar() function */
        /* to make the displayed output easier to read instead of ending */
        /* up with 32K byte record(with trailing blanks and all) put to */
        /* standard output with each select statement. */ 
        exec sql select varchar(left(col_char, 20), 60) into :vch2.buf from dt37_tab-
le;
        printf("%s\n", vch2.buf);

        printf("Test the right()function.\n");
        printf("Query:select varchar(right(col_char, 20), 60)from dt37_table.\n");
        exec sql select varchar(right(col_char, 20), 60) into :vch2.buf from dt37_ta-
ble;
        printf("%s\n", vch2.buf);

        printf("Test the locate() function.\n");
        printf("Query:select varchar(locate(col_char,'$'),60) from dt37_table.\n");
        exec sql select varchar(locate(col_char, '$'), 60) into :vch2.buf from dt37_-
table;
        printf("The first occurrence of '$' is in location: %s\n", vch2.buf);
        printf("Query:select varchar(locate(col_char,'8'),60) from dt37_table.\n");
        exec sql select varchar(locate(col_char, '8'), 60) into :vch2.buf from dt37_-
table;
        printf("The first occurrence of '8' is in location: %s\n", vch2.buf);

        printf("Query:select varchar(locate(col_char,'p'),60) from dt37_table.\n");
        exec sql select varchar(locate(col_char, 'p'), 60) into :vch2.buf from dt37_-
table;
        printf("The first occurrence of 'p' is in location: %s\n", vch2.buf);
        printf("Test the shift() function.\n");
        printf("Query:select varchar(shift(left(col_char,20),10),60) from dt37_table-
.\n");
        exec sql select varchar(shift(left(col_char, 20), 10), 60) into :vch2.buf fr-
om dt37_table;
        printf("%s\n", vch2.buf);
        printf("Query:select varchar(shift(left(col_char, 20),-10),60) from dt37_tab-
le.\n");
        exec sql select varchar(shift(left(col_char, 20), -10), 60) into :vch2.buf f-
rom dt37_table;
        printf("%s\n", vch2.buf);

        printf("Test the charextract() function.\n");
        printf("Query:select varchar(charextract(col_char,11),60) from dt37_table.\n-
");
        exec sql select varchar(charextract(col_char,11), 60) into :vch2.buf from dt-
37_table;
        printf("The 11th character is: %s\n", vch2.buf);

        printf("Test the concat() function.\n");
        printf("Query:select varchar(concat(trim(left(col_char,2)),' Smile!'),60) fr-
om dt37_table.\n"); 
        exec sql select varchar(concat(trim(left(col_char, 2)), ' Smile!'), 60) into-
 :vch2.buf from dt37_table;
        printf("%s\n", vch2.buf);

        printf("Test the length() function.\n");
        printf("Query:select varchar(length(col_char), 60) from dt37_table.\n");
        exec sql select varchar(length(col_char), 60) into :vch2.buf from dt37_table-
;
        printf("%s\n", vch2.buf);

        printf("Test the pad() function.\n");
        printf("Query:select varchar(length(pad(col_char)), 60) from dt37_table.\n")-
;
        exec sql select varchar(length(pad(col_char)), 60) into :vch2.buf from dt37_-
table;
        printf("%s\n", vch2.buf);

        printf("Test the lowercase() function.\n");
        printf("Query:select varchar(lowercase(right(col_char,15)), 60) from dt37_tab-
le.\n");
        exec sql select varchar(lowercase(right(col_char,15)), 60) into :vch2.buf fro-
m dt37_table;
        printf("%s\n", vch2.buf);

        printf("Test the uppercase() function.\n");
        printf("Query:select varchar(uppercase(right(col_char,15)), 60) from dt37_tab-
le.\n");
        exec sql select varchar(uppercase(right(col_char,15)), 60) into :vch2.buf fro-
m dt37_table;
        printf("%s\n", vch2.buf);

        printf("Test the size() function.\n");
        printf("Query:select varchar(size(col_char),60) from dt37_table.\n");
        exec sql select varchar(size(col_char), 60) into :vch2.buf from dt37_table;
        printf("%s\n", vch2.buf);

        printf("Test the soundex() function.\n");
        printf("Query:select varchar(soundex(col_char), 60) from dt37_table.\n");
        exec sql select varchar(soundex(col_char), 60) into :vch2.buf from dt37_tabl-
e;
        printf("%s\n", vch2.buf);

        printf("Test the squeeze() function.\n");
        printf("Query:select varchar(squeeze(col_char), 60) from dt37_table.\n");
        exec sql select varchar(squeeze(col_char), 60) into :vch2.buf from dt37_tabl-
e;
        printf("%s\n", vch2.buf);

        printf("Test the trim() function.\n");
        printf("Query:select varchar(trim(col_char), 60) from dt37_table.\n");
        exec sql select varchar(trim(col_char), 60) into :vch2.buf from dt37_table;
        printf("%s\n", vch2.buf);

        printf("End Testing.\n");
    }
    else
	printf("Failure!!!\n");
    exec sql disconnect;
}

!!
? esqlc chartype.sc 
<<
~
>>
? sepcc chartype 
<<
~
>>
? seplnk chartype 
<<
~
>>
? run chartype.exe SEPPARAMDB SEPPARAM_CHARSET 
<< IF (ING_CHARSET == "UTF8") 
Success!!!
Test the left() function.
Query:select varchar(left(col_char, 20), 60) from dt37_table.
$8888888888$$$$$$$$$
Test the right()function.
Query:select varchar(right(col_char, 20), 60)from dt37_table.
$$$$$$$$$$pppppppppp
Test the locate() function.
Query:select varchar(locate(col_char,'$'),60) from dt37_table.
The first occurrence of '$' is in location: 1
Query:select varchar(locate(col_char,'8'),60) from dt37_table.
The first occurrence of '8' is in location: 2
Query:select varchar(locate(col_char,'p'),60) from dt37_table.
The first occurrence of 'p' is in location: 15991
Test the shift() function.
Query:select varchar(shift(left(col_char,20),10),60) from dt37_table.
          $8888888888$$$$$$$$$
Query:select varchar(shift(left(col_char, 20),-10),60) from dt37_table.
8$$$$$$$$$
Test the charextract() function.
Query:select varchar(charextract(col_char,11),60) from dt37_table.
The 11th character is: 8
Test the concat() function.
Query:select varchar(concat(trim(left(col_char,2)),' Smile!'),60) from dt37_table.
$8 Smile!
Test the length() function.
Query:select varchar(length(col_char), 60) from dt37_table.
16000
Test the pad() function.
Query:select varchar(length(pad(col_char)), 60) from dt37_table.
16000
Test the lowercase() function.
Query:select varchar(lowercase(right(col_char,15)), 60) from dt37_table.
$$$$$pppppppppp
Test the uppercase() function.
Query:select varchar(uppercase(right(col_char,15)), 60) from dt37_table.
$$$$$PPPPPPPPPP
Test the size() function.
Query:select varchar(size(col_char),60) from dt37_table.
16000
Test the soundex() function.
Query:select varchar(soundex(col_char), 60) from dt37_table.
P000
Test the squeeze() function.
Query:select varchar(squeeze(col_char), 60) from dt37_table.
$8888888888$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Test the trim() function.
Query:select varchar(trim(col_char), 60) from dt37_table.
$8888888888$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
End Testing.
>>
<<
Success!!!
Test the left() function.
Query:select varchar(left(col_char, 20), 60) from dt37_table.
$8888888888$$$$$$$$$
Test the right()function.
Query:select varchar(right(col_char, 20), 60)from dt37_table.
$$$$$$$$$$pppppppppp
Test the locate() function.
Query:select varchar(locate(col_char,'$'),60) from dt37_table.
The first occurrence of '$' is in location: 1
Query:select varchar(locate(col_char,'8'),60) from dt37_table.
The first occurrence of '8' is in location: 2
Query:select varchar(locate(col_char,'p'),60) from dt37_table.
The first occurrence of 'p' is in location: 31991
Test the shift() function.
Query:select varchar(shift(left(col_char,20),10),60) from dt37_table.
          $8888888888$$$$$$$$$
Query:select varchar(shift(left(col_char, 20),-10),60) from dt37_table.
8$$$$$$$$$
Test the charextract() function.
Query:select varchar(charextract(col_char,11),60) from dt37_table.
The 11th character is: 8
Test the concat() function.
Query:select varchar(concat(trim(left(col_char,2)),' Smile!'),60) from dt37_table.
$8 Smile!
Test the length() function.
Query:select varchar(length(col_char), 60) from dt37_table.
32000
Test the pad() function.
Query:select varchar(length(pad(col_char)), 60) from dt37_table.
32000
Test the lowercase() function.
Query:select varchar(lowercase(right(col_char,15)), 60) from dt37_table.
$$$$$pppppppppp
Test the uppercase() function.
Query:select varchar(uppercase(right(col_char,15)), 60) from dt37_table.
$$$$$PPPPPPPPPP
Test the size() function.
Query:select varchar(size(col_char),60) from dt37_table.
32000
Test the soundex() function.
Query:select varchar(soundex(col_char), 60) from dt37_table.
P000
Test the squeeze() function.
Query:select varchar(squeeze(col_char), 60) from dt37_table.
$8888888888$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Test the trim() function.
Query:select varchar(trim(col_char), 60) from dt37_table.
$8888888888$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
End Testing.
>>
? delete chartype.sc
<<
~
>>
? delete chartype.c
<<
~
>>
? delete chartype.o
<<
~
>>
? delete chartype.obj
<<
~
>>
? delete chartype.exe
<<
~
>>


Ending at: Mon Nov  3 19:22:21 2008
