/*
**  Copyright (c) 2005-2006 Ingres Corporation. All Rights Reserved.
*/

----------------------------------------------------------------------------

 Ingres Appsuite Stress Testing Document

----------------------------------------------------------------------------

Document History:

      15-Dec-2005 (sarjo01) Created.
      03-Jan-2006 (sarjo01) Added new scenarios. Fixed some typos. 
      24-Feb-2006 (sarjo01) Added runappsuite.sh description. 


Overview
--------
The Appsuite Stress Test suite is a collection of stand-alone, multithreaded
ESQLC programs that generate multiple concurrent sessions for performing
stress, load, and performance testing of the Ingres DBMS and its various
subsystems (e.g. locking, logging and journaling.)

The purpose of this document is to describe the set-up and execution of the
Appsuite programs for stress-testing an Ingres installation as part of the
standard QA process.

Note that the Appsuite programs are compatible with Ingres version r3 and
higher.


Building the Program Executables
--------------------------------
All Appsuite program executables should be built from source on the local
system where the stress testing will be conducted. The program source files
are located in this directory:

      $ING_TST/stress/appsuite
 
Program source files have names of the form xxxxxxx.sc (e.g. insdel.sc).
Some programs require additional data files for loading test tables. Data files
are located in the same directory as the program source.

The programs should build without errors on Windows, Linux and Unix systems
using the standard QA test tools.  All executables are built using the
following sequence of commands:

      esqlc -multi <pgmname>
      sepcc <pgmname>
      seplnk <pgmname>

Example: To build the insdel program, the commands are:

      esqlc -multi insdel 
      sepcc insdel 
      seplnk insdel 

Note that the executable program file name generated by the above commands will
will be <pgmname>.exe for all platforms.


Ingres DBMS Configuration 
-------------------------
In addition to running the standard set-up script, tstsetup.sh, the Ingres
installation being tested should have the following configuration options set
prior to stress testing:

      1) CBF: Transaction Log > Configure >  file size = 256MB
      2) CBF: Logging System`> Configure > buffer_count = 100
      3) CBF: Logging System`> Configure > Derived > cp_interval_mb = 40
      4) ingsetenv II_CONNECT_RETRIES 100

Be sure to restart the Ingres installation after making configuration changes.


Executing the Programs
----------------------
A program will be run three times for normal stress testing using the following generic command lines:

      <pgmname>.exe <database> init [ <option> <option> ... ] >  <pgmname>.out
      <pgmname>.exe <database> run  [ <option> <option> ... ] >> <pgmname>.out
      <pgmname>.exe <database> cleanup 

The init function creates the database objects necessary for stress testing.
The run function does the actual stress test execution.
The cleanup function removes all database objects previously created for the
test.

Note: To see a syntax message with a complete list and explanation of a
program's options, execute the program without any arguments.


Build and Output Directory
--------------------------
Before running the stress tests, create and make current an output directory
as follows:

      mkdir $TST_OUTPUT/appsuite
      cd $TST_OUTPUT/appsuite

Program source and data files may now be copied to this directory prior to
building and execution. Example:

      cp $ING_TST/stress/appsuite/insdel.sc .
      esqlc -multi insdel
      sepcc insdel
      seplnk insdel


Appsuite Stress Test Scenarios
------------------------------
The following is a basic list of recommended stress test scenarios to be run
against all Ingres releases. Each scenario assumes:

      *  the executable program has been built as specified above in the
         current (output) directory;
      *  a test database, e.g. appsuitedb, has been created.


 1.  ddlv1 - Concurrent CREATE, DROP TABLE 
     -------------------------------------

     ./ddlv1.exe appsuitedb init > ddlv1.out
     ./ddlv1.exe appsuitedb run -t16 -v0 -i5000 -s250 >> ddlv1.out 
     ./ddlv1.exe appsuitedb cleanup 

 2.  insdel - Btree INSERT, DELETE with forced rollback 
     --------------------------------------------------

     ./insdel.exe appsuitedb init -p32 > insdel.out
     ./insdel.exe appsuitedb run -t24 -v0 -i50000 -d10 -b5 -h50000 >> insdel.out
     ./insdel.exe appsuitedb cleanup 

 3.  ordent - Order Entry Simulation 
     -------------------------------

     ./ordent.exe appsuitedb init -d > ordent.out
     ./ordent.exe appsuitedb run -t24 -v0 -i50000 -w1 -lr >> ordent.out 
     ./ordent.exe appsuitedb cleanup 

 4.  qp1 - Complex QEP (Requires files $ING_TST/stress/appsuite/qp1*.data)
     ---------------------------------------------------------------------

     ./qp1.exe appsuitedb init > qp1.out
     optimizedb -zk appsuitedb
     ./qp1.exe appsuitedb run -t10 -v0 -i1000 -p >> qp1.out 
     ./qp1.exe appsuitedb cleanup 

 5.  qp3 - Complex QEP (Requires files $ING_TST/stress/appsuite/qp3*.data)
     ---------------------------------------------------------------------

     ./qp3.exe appsuitedb init > qp3.out
     optimizedb -zk appsuitedb
     ./qp3.exe appsuitedb run -t4 -v0 -i1000 -p >> qp3.out 
     ./qp3.exe appsuitedb cleanup 

 6.  selv1 - Btree Indexed SELECT 
     -----------------------------

     ./selv1.exe appsuitedb init -r50000 -p32 -o500 > selv1.out
     ./selv1.exe appsuitedb run -t24 -v0 -i100000 -z >> selv1.out
     ./selv1.exe appsuitedb cleanup 

 7.  updv1 - Btree Indexed compressed varchar UPDATE with forced rollback
     --------------------------------------------------------------------

     ./updv1.exe appsuitedb init -p10 -c > updv1.out
     ./updv1.exe appsuitedb run -t24 -v0 -i20000 -b5 >> updv1.out 
     ./updv1.exe appsuitedb cleanup 


Shell Script runappsuite.sh
---------------------------
There is a shell script available for Unix / Linux platforms that will run
the basic scenarios unattended. The syntax is:

     sh $TST_SHELL/runappsuite.sh all

to execute all scenarios, or

     sh $TST_SHELL/runappsuite.sh <test> [ <test> <test> ... ]

where <test> is one or more of [ ddlv1 insdel ordent qp1 qp3 selv1 updv1 ].

The script performs creates the test database and performs all build, run and
cleanup functions.

Output files are written to $TST_OUTPUT/appsuite.


Stress Test Results
-------------------
Depending on machine type, a stress test scenario may take from fifteen minutes
to several hours to complete.

The output file, <pgmname>.out, should be 'tailed' regularly while the test is
in progress to make sure that some problem like a DBMS crash is not causing 
'runaway' errors to be generated.

At the conclusion of the 'run' phase of a scenario, both the output file and
$II_SYSTEM/ingres/files/errlog.log should be examined.  The tests are designed
such that the only acceptable errors are deadlocks and lock wait timeouts. Note
that both of these errors may commonly be seen running the above scenarios.

A test scenario will be considered to have run successfully if at its
conclusion, no unexpected errors are noted, and the Ingres installation
processes are up and running normally.

Cleaning Up
-----------
In addition to running the 'cleanup' phase of each scenario, the output
directory should be cleaned of unnecessary files with the following commands:

     cd $TST_OUTPUT/appsuite
     chmod +w *.sc
     chmod +w *.data
     rm *.sc *.c *.exe *.o *.obj *.data

