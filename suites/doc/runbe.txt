Copyright (c) 2004 Ingres Corporation


DOCUMENTATION TO RUN BACK-END SEP TESTS (UNIX/WINDOWS)

	Created:       09-nov-1992     (judi)
	Last Edited:   15-apr-1994     (garys) Added audit1 and audit2
					database names for lar 
                                        information.
	Last Edited:   03-may-1994     (stephenb)Added C2 tests.
	Last Edited:   31-jan-1995     (holla02)c2, lar changes
	Last Edited:   09-Jan-1996     (walro03) correct name of udt's
                                        database.
        Last Edited:   23-dec-1996     (walro03) You can init the lar
                                        database individually.
	Last Edited:   06-Jun-1997     (wanya01) add known problems 
                                        for alttbl,fld,vps,udt,and sol
	Last Edited:   01-Jun-2000     (wu$ca01) Updated with new setup 
                                        information and added the blob
                                        and miscfunc suites.
                       31-Jul-2000     (vande02) Added correct steps to setup
					sol and udt tests on NT.
                       06-Oct-2000     (vande02) Updated the Known Problems with
					tests on Unix, added new flags to over-
					ride the diff and tolerence levels when
					running BE (especially LAR), and the
					suggestion to run with Security Auditing
					OFF until you need it on for C2SECURE.
                       01-Jul-2002     (vande02) Added Expected DIFS for LAR
					after recent changes.
                       14-Nov-2002     (vande02) Removing the manual UDT and
					Spatial Object setup steps as these are
					not used any longer.  Also, the two BE
					suites of UDT/SOL have been separated
					out to be done by themselves and will
					not be included in the 'all' parameter
					for 'runbe.sh init|be|clean'. Added a
					new section to setup/run UDT/SOL.Lastly,
					cleaned up some out-of-date information.
		       17-Sep-2004     (legru01) Removed all references
		       			to non-existing sep tests in the 
		       			Open Source Acceptance Test Package.
		       			Also removed outdated testing data
		       			and/or instructions for the 
		       			OpenSource Acceptance Test package. 			
					(i.e. rll, rodb, etc.).
					Removed section F. (known problems)
					irrelevant.
		       15-Oct-200      (legru01) Added needed instructions 
		       			for Windows			

This document describes:

	A.	The environment variables used by this script.
	B.	Setup for back-end test         
	C.	The execution process.
	D.	Tables showing the facility name, databases, database 
		variables, setup scripts, output files and .lis file
		names needed for each facility. 
	E.	Monitor Progress of back-end test

A.  ENVIRONMENT VARIABLES:

    ING_TST         This variable points to the top of your testing
                    area structure.  This variable must be set in 
                    order to execute this script.  This variable 
                    should be set in your environment setup file.

    TST_ROOT_OUTPUT This variable has been set in the environment
		    setup file. This script will use this variable to
                    point to the location of the test output files 
                    generated by this script. Your test output will be
                    directed to:
                    
                    UNIX: $TST_ROOT_OUTPUT/be.
                    WINDOWS: %TST_ROOT_OUTPUT%\be
                    
    TST_CFG         This variable points to the location of the .cfg 
                    files.

                    UNIX: $ING_TST/suites/acceptst
                    WINDOWS: %ING_TST%\suites\acceptst

    TST_SHELL       This variable points to the location of the shell
                    files.

                    UNIX: $ING_TST/suites/shell.
                    WINDOWS: %ING_TST%\suites\bat

    TST_TESTOOLS    This variable points to the directories driver and
                    util. The following testtools reside within these
                    directories:

                    UNIX: $ING_TST/testtool/driver/driver.sc
                    WINDOWS: %ING_TST%\testtool\driver\driver.sc

	*** NOTE ***

	UNIX
	
	To verify your environment variables are correct see sample script in
	$ING_TST/suites/userenv/tstenv

	WINDOWS	
	
	To verify your environment variables are correct see sample script in
	%ING_TST%\suites\userenv\tstenv.bat

B.  SETUP FOR BACK-END TEST:
	
  	UNIX
     	
     	If you successfully executed the tstsetup.sh, the test environment
     	should be fully setup.  See the $ING_TST/suites/doc/TESTING 
     	document for a full explanation of all setup requirements.
     
   	WINDOWS
     	
     	If you successfully executed the tstsetup.bat, the test environment
     	should be fully setup.  See the %ING_TST%\suites\doc\TESTING
     	document for a full explanation of all setup requirements.

	***NOTE***

	Make sure your installation is functional after all the modifications
	just made with 'tstsetup.sh/bat' by performing a sanity check
        (accessdb, cbf, ipm, iinamu, iimonitor, sql iidbdb, ingstop, ingstart).

     	Shutdown your Ingres Installation. Your installation should shut down
        cleanly. Again, check for any messages in the errlog.log.

C.  EXECUTION PROCESS:

	If resouces are tight (i.e. disk space, memory) you can exclude the
     	LAR and C2SECURE suites and the required configuration changes from
     	your first run of the back-end tests.  The server configuration and
     	these two suites can be run separately later.
     
     	C2SECURE is the only suite that requires Security Auditing turned ON
     	in 'cbf' so it may help performance if you turn it OFF until you run
     	C2SECURE separately.

     	LAR tests require ALL DBMS cache sizes to be turned ON.

     	All testing should be executed with a default (generic) DBMS Server. 

     	Before running the BE suites, it is required to execute a script
     	to initialize the back-end databases.  Then, a different parameter uses
     	the same script or batch file to run the back-end test suites.
     
   	UNIX
      	runbe.sh 

   	WINDOWS
      	runbe.bat

	1. Initialize the databases.

	   The script can be executed in two ways: a) in its entirety, or b) by
	   facility.

	   a) To initialize ALL databases:

		UNIX:	 %  sh $TST_SHELL/runbe.sh init all
		WINDOWS: > %TST_SHELL%\runbe.bat init all

	   b) To initialize selected databases, choose the modules
	      shown between the pipes:

		UNIX:	 % sh $TST_SHELL/runbe.sh init |access|accntl|api
						       |datatypes|miscfunc
						       |qryproc|util|blob
						       |c2secure|alttbl
						       |fastload|ttpp|lar

		WINDOWS: > %TST_SHELL%\runbe.bat init |access|accntl|api
						      |datatypes|miscfunc
						      |qryproc|util|blob
						      |c2secure|alttbl
						      |fastload|ttpp|lar
	
   	The resulting output of the initialization can be found in
   	$TST_ROOT_OUTPUT/beinit.out or %TST_ROOT_OUTPUT%\beinit.out.

   
   	The following databases will be created:

		accessdb1
		accntldb
                alttbldb
		apidb1
		apidb2
		blobdb
		datatypedb
		datatypedb2
                fastloaddb
		lardb
		msfndb
		qryprocdb
                securedb
                ttppdb
		unidb
		utildb
		utildb3
		utildb4

        2. Execute the script.

	   The script can be executed in two ways: a) in its entirety, or b)
	   b)by facility 

	   a) To execute the script in its entirety: 

		UNIX:	 % sh $TST_SHELL/runbe.sh be all
		WINDOWS: > %TST_SHELL%\runbe.bat be all

	   b) To run selected test modules, choose the modules shown
	      between the pipes:

		UNIX:	 % sh $TST_SHELL/runbe.sh be |access|accntl|api
						     |datatypes|miscfunc
						     |qryproc|util|blob
						     |c2secure|alttbl
						     |fastload|ttpp|lar

		WINDOWS: > %TST_SHELL%\runbe.bat be |access|accntl|api
						    |datatypes|miscfunc
						    |qryproc|util|blob
						    |c2secure|alttbl
						    |fastload|ttpp|lar

D.  ADDITIONAL DOCUMENTATION BY FACILITY:

              Database      Database     ($TST_CFG)   ($TST_ROOT_OUTPUT)
Facility      Variable      Name         LIST FILES    OUTPUT FILES 
-------------------------------------------------------------------------------
access    | SEPPARAMDB        accessdb1   beam.lis      beam.rpt, *.log,*.out
          | SEPPARAMDRIVERDB -daccessdb1		            
-------------------------------------------------------------------------------
datatypes | SEPPARAMDB1      datatypedb   bedt.lis      bedt.rpt, *.log, *.out
          | SEPPARAMDB2      datatypedb2		
	  | SEPPARAMDB       datatypedb2
	  | SEPPARAMDB       unidb
-------------------------------------------------------------------------------
miscfunc  | SEPPARAMDB	     msfndb	  bemsfn.lis    bemsfn.rpt, *.log,*.out
-------------------------------------------------------------------------------
qryproc   | SEPPARAMDB       qryprocdb 	  beqp.lis      beqp.rpt, *.log, *.out
          | SEPPARAMDRIVERDB -dqryprocdb
-------------------------------------------------------------------------------
acctnl    | SEPPARAMDB       accntldb     beacc.lis     beacc.rpt, *.log, *.out 
	  | SEPPARAMDB3      grantdb			 
          | SEPPARAMDRIVERDB -dgrantdb
-------------------------------------------------------------------------------
api       |		     apidb1	  beapi.lis	beapi.rpt, *.log, *.out
			     apidb2
-------------------------------------------------------------------------------
lar       | SEPPARAMDB 	     lardb        belar.lis      belar.rpt *.log, *.out
          |            	     ckptst
          |                  ckptst1
          |                  ckptst2
          |						   
          |(NOTE: After running test, it is recommended to destroydb ckptst1/2 
          |       because they leave huge files around which cause some boxes 
          |       to run out of disk space.)
-------------------------------------------------------------------------------
util      | SEPPARAMDB      utildb      beutil.lis   beutil.rpt, *.log, *.out 
	  |		    utildb3
	  |		    utildb4
-------------------------------------------------------------------------------
blob      | SEPPARAMDB      blobdb      beblob.lis   beblob.rpt   *.log *.out
-------------------------------------------------------------------------------
c2secure  | SEPPARAMDB      securedb    c2_aud.lis   c2_aud.rpt, *.log, *.out
-------------------------------------------------------------------------------
alttbl    | SEPPARAMDB      alttbldb   bealttbl.lis  bealttbl.rpt *.log *.out
-------------------------------------------------------------------------------
fastload  | SEPPARAMDB      fastloaddb  befld.lis    befld.rpt    *.log *.out
-------------------------------------------------------------------------------
ttpp      | SEPPARAMDB      ttppdb      bettpp.lis   bettpp.rpt   *.log *.out
-------------------------------------------------------------------------------

 E.  MONITOR PROGRESS OF BACK-END TESTS:

     Open 3 windows to view the performance of the test:

        1. To execute the commands to run the test suite

        2. Watch the errlog.log file
           (located in II_SYSTEM/ingres/files)
            
		UNIX/WINDOWS: 
		tail -f errlog.log

	3. To monitor the test progress, go to 
	  (located in TST_OUTPUT/be/suitename)
	
		UNIX/WINDOWS:
            	tail -f [any output file named above in section C.]
