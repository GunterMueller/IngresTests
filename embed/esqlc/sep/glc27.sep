/*
Copyright (c) 2007 Ingres Corporation

	Test Name: glc27.sep (formerly pza26sc.sep)
	Time: Tue Jun 14 11:02:19 1994
	User Name: jbryson
	Terminal type: septerm
 
	Test ID : glc27
	Module  : 3gl
	Filename: glc27.sep
	Purpose	: To test DCLGEN with delimited ID's and long varchar's.
	Input Files  : pza26sc.sc, pza26sc.sql
	Output Files : pza26c.dcl
	Database     : personnel
	Tables       : "pza26 table"
	Synopsis     : To test that DCLGEN generates the correct structure 
		       for a table with delimited ID's and long varchar's.
		       DCLGEN will also generate warnings.

 History: 14-Jun-1994	(jbryson) Created
          17-Feb-1995	(qiuji01) Took new canon for copyright.
	  05-Apr-1995	(somsa01) Took out SEPPARAMDB.
          03-Apr-1997	(chiel02) Modified for Windows NT.
	  09-Dec-1998   (panyu01) Mantained cannon for VMS.
          19-Aug-1999   (hweho01) Add alternate canon for AIX 64-bit
                                  platform.
          29-Sep-2005   (sinna02) Modified copyright msg in VMS Canon
                                  against dclgen command.
          30-Jan-2006	(boija02) Updated copyright info for Ingres Corp.
          21-Mar-2007	(vande02) Changed data type date to ingresdate, added
				  copyright, made header corrections.
*/
? delete pza26sc.c 
<<
~
>>
? delete pza26c.c 
<<
~
>>
? delete pza26c.dcl 
<<
~
>>
? fill pza26sc.sql 
!!
create table "pza26 table"(
	i1 i1,
	i2 smallint,
	i4 integer,
	f4 f4,
	f8 float,
	"d e c" decimal(20,4),
	DEC  decimal,
	money money,
	"da te" ingresdate,
	vc varchar(10),
	c char(10),
	blob long varchar) \p\g
!!
? sql -s personnel 
<<

>>
* drop table "pza26 table"\g 
<<
~
>>
* \i pza26sc.sql 
<<
 
create table "pza26 table"(
	i1 i1,
	i2 smallint,
	i4 integer,
	f4 f4,
	f8 float,
	"d e c" decimal(20,4),
	DEC  decimal,
	money money,
	"da te" ingresdate,
	vc varchar(10),
	c char(10),
	blob long varchar) 
>>
* \q 
<<
~
>>
.if (VMS) 
? dclgen c personnel """pza26 table""" pza26c.dcl pza26 
<<
INGRES DCLGEN Copyright 2005 Ingres Corporation
DCLGEN: Working . . .

DCLGEN: Describing table '"pza26 table"' . . .

E_DC0011 Warning: column name 'd e c' has been changed to a valid variable
    name for your compiler. Please check DCLGEN output for uniqueness of
    variable names.

E_DC0011 Warning: column name 'da te' has been changed to a valid variable
    name for your compiler. Please check DCLGEN output for uniqueness of
    variable names.

E_DC000A Warning: Table '"pza26 table"' contains column(s) of unlimited
    length. Character string(s) of zero length have been generated and this
    will cause a compile-time error.  You need to modify the output file to
    specify an appropriate length.

>>
.endif
.if (NT_GENERIC) 
? dclgen c personnel "\"pza26 table\"" pza26c.dcl pza26 
<<
INGRES DCLGEN Copyright (c) 1985, 1991 Ingres CorporationDCLGEN: Working . . .

DCLGEN: Describing table '"pza26 table"' . . .

E_DC0011 Warning: column name 'd e c' has been changed to a valid variable
    name for your compiler. Please check DCLGEN output for uniqueness of
    variable names.

E_DC0011 Warning: column name 'da te' has been changed to a valid variable
    name for your compiler. Please check DCLGEN output for uniqueness of
    variable names.

E_DC000A Warning: Table '"pza26 table"' contains column(s) of unlimited
    length. Character string(s) of zero length have been generated and this
    will cause a compile-time error.  You need to modify the output file to
    specify an appropriate length.

>>
.endif
.if (Unix) 
? dclgen c personnel "pza26 table" pza26c.dcl pza26 
<<
INGRES DCLGEN Copyright (c) 1985, 1991 Ingres CorporationDCLGEN: Working . . .

DCLGEN: Describing table '"pza26 table"' . . .

E_DC0011 Warning: column name 'd e c' has been changed to a valid variable
    name for your compiler. Please check DCLGEN output for uniqueness of
    variable names.

E_DC0011 Warning: column name 'da te' has been changed to a valid variable
    name for your compiler. Please check DCLGEN output for uniqueness of
    variable names.

E_DC000A Warning: Table '"pza26 table"' contains column(s) of unlimited
    length. Character string(s) of zero length have been generated and this
    will cause a compile-time error.  You need to modify the output file to
    specify an appropriate length.

>>
.endif
? fill pza26sc.sc 
!!
EXEC SQL INCLUDE 'pza26c.dcl';

main()
{
}
!!
? esqlc pza26sc 
<<
~
>> 
? type pza26c.dcl 
<<
/* Description of table "pza26 table" from database personnel */
  EXEC SQL DECLARE "pza26 table" TABLE
	(i1	integer1,
	 i2	smallint,
	 i4	integer,
	 f4	float4,
	 f8	float,
	 "d e c"	decimal(20,4),
	 dec	decimal(5,0),
	 money	money,
	 "da te"	ingresdate,
	 vc	varchar(10),
	 c	char(10),
	 blob	long varchar);

  struct pza26_ {
	short	i1;
	short	i2;
	int	i4;
	float	f4;
	double	f8;
	double	d_e_c;
	double	dec;
	double	money;
	char	da_te[26];
	char	vc[11];
	char	c[11];
	char	blob[0];
  } pza26;
>>
<<
/* Description of table "pza26 table" from database personnel */
  EXEC SQL DECLARE "pza26 table" TABLE
	(i1	integer1,
	 i2	smallint,
	 i4	integer,
	 f4	float4,
	 f8	float,
	 "d e c"	decimal(20,4),
	 dec	decimal(5,0),
	 money	money,
	 "da te"	ingresdate,
	 vc	varchar(10),
	 c	char(10),
	 blob	long varchar);

  struct pza26_ {
	short	i1;
	short	i2;
	long	i4;
	float	f4;
	double	f8;
	double	d_e_c;
	double	dec;
	double	money;
	char	da_te[26];
	char	vc[11];
	char	c[11];
	char	blob[0];
  } pza26;
>>
? delete pza26sc.c 
<<
~
>>
? delete pza26c.c 
<<
~
>>
? delete pza26c.dcl 
<<
~
>>


Ending at: Fri Feb 17 16:20:55 1995
