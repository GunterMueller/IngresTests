/*
	Test Name: pza13sc.sep
	Time: Tue Oct  5 16:15:40 1993
	User Name: jbryson
	Terminal type: septerm
 
	Test ID : pza13sc
	Module  : 3gl
	Filename: pza13sc.sep
	Purpose	: test the Long Varchar Data Type (BLOB)
	Input Files  :
	Output Files :
	Database     : SEPPARAMDB
	Tables       : blobtable
	Synopsis     : Uses the DYNAMIC and "standard SQL method" for
		       the BLOB datatype.  Uses host language variables with
		       cursor selects to manipulate the BLOB data type.

 History: 5-Oct-1993	(jbryson)	Created
          02-Apr-1997  Modified (chiel02)
                       Added an alternate canon for the sepcc command.
                       Removed the platform specifications of the canons 
                       for the esqlc command to make it work under NT. 
*/
? delete pza13sc.c 
<<
~
>>
? delete pza13sc.o 
<<
~
>>
? delete pza13sc.obj 
<<
~
>>
? delete pza13sc.exe 
<<
~
>>
? fill pza13sc.sql 
!!
create table blobtable (
       intcol integer,
       lvchcol long varchar)\p\g
insert into blobtable values
   (1,'This is blob row #1')\p\g
insert into blobtable values
   (2,'This is blob row #2 - just a little longer!')\p\g
insert into blobtable values
   (3,'This is blob row #3')\p\g
insert into blobtable values
   (4,'This is blob row #4')\p\g
insert into blobtable values
   (5,null)\p\g
insert into blobtable values
   (6,'This is blob row #6 after a NULL row.')\p\g

!!
? sql -s SEPPARAMDB 
<<
~
>>
* drop table blobtable\g 
<<
~
>>
* \i pza13sc.sql 
<<
 
 create table blobtable (
       intcol integer,
       lvchcol long varchar)
insert into blobtable values
   (1,'This is blob row #1')
(1 row)
insert into blobtable values
   (2,'This is blob row #2 - just a little longer!')
(1 row)
insert into blobtable values
   (3,'This is blob row #3')
(1 row)
insert into blobtable values
   (4,'This is blob row #4')
(1 row)
insert into blobtable values
   (5,null)
(1 row)
insert into blobtable values
   (6,'This is blob row #6 after a NULL row.')
(1 row)
>>
* \q 
<<
~
>>
? fill pza13sc.sc 
!!
#include <stdio.h>
#include    <string.h>

EXEC SQL INCLUDE SQLCA;
EXEC SQL INCLUDE SQLDA;

IISQLDA _sqlda;
IISQLDA *sqlda = &_sqlda;

main(argc,argv)
int     argc;
EXEC SQL BEGIN DECLARE SECTION;
char*   argv[];
EXEC SQL END DECLARE SECTION;
{
   short   flag;

   if (argc < 2)
   {
      printf("Usage: %s <database name>\n",argv[0]);
      exit(1);
   }

   EXEC SQL WHENEVER SQLERROR STOP;

   EXEC SQL CONNECT :argv[1];

   EXEC SQL WHENEVER SQLERROR CALL SQLPRINT;

   sqlda->sqln = 1;
   EXEC SQL PREPARE stmt INTO :sqlda FROM 'select lvchcol from blobtable';

   if(abs(sqlda->sqlvar[0].sqltype) != IISQ_LVCH_TYPE)
   {
      printf("Must use BLOB column\n");
      EXEC SQL DISCONNECT;
      exit(1);
   }

   if(sqlda->sqlvar[0].sqltype < 0)
      flag = -1;
   else
      flag = 1;

   printf("SQLLEN:  %d\n",sqlda->sqlvar[0].sqllen);
   printf("SQLTYPE: %d\n",sqlda->sqlvar[0].sqltype);

   do_it(IISQ_VCH_TYPE * flag);
   do_it(IISQ_CHA_TYPE * flag);
   do_it(IISQ_CHR_TYPE * flag);
   do_it(IISQ_TXT_TYPE * flag);

   EXEC SQL DISCONNECT;
}

/********************************************/
do_it(type)
int type;
{
   EXEC SQL BEGIN DECLARE SECTION;
	char	blobstr[31];
	short	ind;
   EXEC SQL END DECLARE SECTION;

   EXEC SQL DECLARE c1 CURSOR FOR stmt;

   sqlda->sqlvar[0].sqltype = type;
   sqlda->sqlvar[0].sqldata = (char *)blobstr;
   sqlda->sqlvar[0].sqllen  = sizeof(blobstr)-1;

   if(type<0)
      sqlda->sqlvar[0].sqlind = (short *)&ind;
   else
      sqlda->sqlvar[0].sqlind = (short *)0;

   printf("\n*****************************************************\n");

   switch(abs(type)){
      case IISQ_VCH_TYPE:
         printf("Doing sqltype -> IISQ_VCH_TYPE\n");
	 sqlda->sqlvar[0].sqllen -= 2;  /* make room for the "short" length */
	 break;
      case IISQ_CHA_TYPE:
         printf("Doing sqltype -> IISQ_CHA_TYPE\n");
	 break;
      case IISQ_CHR_TYPE:
         printf("Doing sqltype -> IISQ_CHR_TYPE\n");
	 break;
      case IISQ_TXT_TYPE:
         printf("Doing sqltype -> IISQ_TXT_TYPE\n");
	 break;
      default:
         printf("bad character datatype!\n");
   }
   EXEC SQL OPEN c1 FOR READONLY;
   while(1)
   {
      if(abs(type) == IISQ_TXT_TYPE)
	 for(ind=0;ind<sizeof(blobstr);ind++)
	    blobstr[ind] = '\0';

      EXEC SQL FETCH c1 USING DESCRIPTOR sqlda;
      if (sqlca.sqlcode)
         break;

      if(sqlda->sqlvar[0].sqlind && *sqlda->sqlvar[0].sqlind == -1)
	 printf("blob is NULL\n");
      else if(abs(type)  == IISQ_VCH_TYPE)
      {
	 printf("Varchar len=%d\n",*(short *)sqlda->sqlvar[0].sqldata);
	 sqlda->sqlvar[0].sqldata[*(short *)sqlda->sqlvar[0].sqldata+2] = '\0';
         printf("Varchar blob=%s=\n",sqlda->sqlvar[0].sqldata+2);
      }
      else
         printf("blob=%s=\n",sqlda->sqlvar[0].sqldata);
   }
   EXEC SQL CLOSE c1;
}
!!
? esqlc pza13sc.sc 
<<
ESQL pza13sc.sc:
>>
<< 
>>
? sepcc pza13sc 
<<
>>
<<
pza13sc.c
>>
? seplnk pza13sc 
<<
>>
? run pza13sc.exe SEPPARAMDB 
<<
SQLLEN:  0
SQLTYPE: -22

*****************************************************
Doing sqltype -> IISQ_VCH_TYPE
Varchar len=19
Varchar blob=This is blob row #1=
Varchar len=28
Varchar blob=This is blob row #2 - just a=
Varchar len=19
Varchar blob=This is blob row #3=
Varchar len=19
Varchar blob=This is blob row #4=
blob is NULL
Varchar len=28
Varchar blob=This is blob row #6 after a =

*****************************************************
Doing sqltype -> IISQ_CHA_TYPE
blob=This is blob row #1=
blob=This is blob row #2 - just a l=
blob=This is blob row #3=
blob=This is blob row #4=
blob is NULL
blob=This is blob row #6 after a NU=

*****************************************************
Doing sqltype -> IISQ_CHR_TYPE
blob=This is blob row #1=
blob=This is blob row #2 - just a l=
blob=This is blob row #3=
blob=This is blob row #4=
blob is NULL
blob=This is blob row #6 after a NU=

*****************************************************
Doing sqltype -> IISQ_TXT_TYPE
blob=This is blob row #1=
blob=This is blob row #2 - just a l=
blob=This is blob row #3=
blob=This is blob row #4=
blob is NULL
blob=This is blob row #6 after a NU=
>>
? delete pza13sc.c 
<<
~
>>
? delete pza13sc.o 
<<
~
>>
? delete pza13sc.obj 
<<
~
>>
? delete pza13sc.exe 
<<
~
>>


Ending at: Tue Oct  5 16:49:50 1993
