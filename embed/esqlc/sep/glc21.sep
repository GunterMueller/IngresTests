/*
	Test Name: pza20sc.sep
	Time: Thu Jan 20 20:00:38 2094
	User Name: jbryson
	Terminal type: septerm
 
	Test ID : pza20sc
	Module  : 3gl
	Filename: pza20sc.sep
	Purpose	: test SQLCODE and SQLSTATE.
	Input Files  :
	Output Files : pza20sc.sc
	Database     : SEPPARAMDB
	Tables       : iitables(view)
	Synopsis     : This is a test of SQLCODE and SQLSTATE when they are
		       declared outside of the DECLARE SECTION.  SQLCODE
		       will only work when the -sqlcode flag is used and
		       will not work with out the flag.  SQLSTATE will 
		       not work at all!

 History: 20-Jan-2094	(jbryson)	Created
          30-Mar-1995	(ciodi01)	Modified
			Replaced canons for 'run pza20sc.exe' since
			error message now includes database name.
          02-Apr-1997	(chiel02)
                        Added an alternate canon each for the sepcc commands.
*/
? delete pza20sc.c 
<<
~
>>
? delete pza20sc.o 
<<
~
>>
? delete pza20sc.obj 
<<
~
>>
? delete pza20sc.exe 
<<
~
>>
? sql -s SEPPARAMDB 
<<
~
>>
* drop table non_table\p\g
<<
~
>>
* \q
<<
~
>>
? fill pza20sc.sc 
!!
/* inorder to get SQLCODE to work outside of DECLARE SECTION 
   use: esqlc -sqlcode .... */

EXEC SQL INCLUDE SQLCA;
EXEC SQL BEGIN DECLARE SECTION;
EXEC SQL END DECLARE SECTION;

   int SQLCODE;
   char SQLSTATE[6];

int main(argc,argv)
int  argc;
EXEC SQL BEGIN DECLARE SECTION;
char *argv[];
EXEC SQL END DECLARE SECTION;
{
EXEC SQL BEGIN DECLARE SECTION;
   int count;
EXEC SQL END DECLARE SECTION;

   if (argc < 2)
   {
      printf("Usage: %s <database name>\n",argv[0]);
      exit(1);
   }

   EXEC SQL WHENEVER SQLERROR CALL SQLPRINT;

   EXEC SQL CONNECT foo_invalid;
   printSQL("After invalid connect");

   EXEC SQL CONNECT :argv[1];
   printSQL("After valid connect");

   if(sqlca.sqlcode != 0)
      exit(-1);

   EXEC SQL SELECT intcol INTO :count FROM non_table;
   printSQL("After invalid select");

   EXEC SQL SELECT count(*) INTO :count FROM iitables;
   printSQL("After valid select");

   EXEC SQL DISCONNECT;
   printSQL("After valid disconnect");

   exit(0);
} /* Main Program */

printSQL(str)
char *str;
{
   printf("%s\n",str);
   printf("SQLSTATE=%.5s=\n",SQLSTATE);
   printf("SQLCODE=%d=\n",SQLCODE);
   printf("sqlca.sqlcode=%d=\n\n",sqlca.sqlcode);

}
!!
? esqlc -sqlcode pza20sc.sc 
<<
ESQL pza20sc.sc:
>>
<<
>>
? sepcc pza20sc 
<<
>>
<<
pza20sc.c
>>
? seplnk pza20sc 
<<
>>
? run pza20sc.exe SEPPARAMDB 
<<
E_US0010 Database does not exist: 'foo_invalid                     '.
    (Thu Mar 30 14:18:16 1995)
After invalid connect
SQLSTATE==
SQLCODE=-38100=
sqlca.sqlcode=-38100=

After valid connect
SQLSTATE==
SQLCODE=0=
sqlca.sqlcode=0=

E_US0845 Table 'non_table' does not exist or is not owned by you.
    (Thu Mar 30 14:18:17 1995)
After invalid select
SQLSTATE==
SQLCODE=-30100=
sqlca.sqlcode=-30100=

After valid select
SQLSTATE==
SQLCODE=0=
sqlca.sqlcode=0=

After valid disconnect
SQLSTATE==
SQLCODE=0=
sqlca.sqlcode=0=

>>
? esqlc pza20sc.sc 
<<
ESQL pza20sc.sc:
>>
<<
>>
? sepcc pza20sc 
<<
>>
<<
pza20sc.c
>>
? seplnk pza20sc 
<<
>>
? run pza20sc.exe SEPPARAMDB 
<<
E_US0010 Database does not exist: 'foo_invalid                     '.
    (Thu Mar 30 14:18:39 1995)
After invalid connect
SQLSTATE==
SQLCODE=0=
sqlca.sqlcode=-38100=

After valid connect
SQLSTATE==
SQLCODE=0=
sqlca.sqlcode=0=

E_US0845 Table 'non_table' does not exist or is not owned by you.
    (Thu Mar 30 14:18:40 1995)
After invalid select
SQLSTATE==
SQLCODE=0=
sqlca.sqlcode=-30100=

After valid select
SQLSTATE==
SQLCODE=0=
sqlca.sqlcode=0=

After valid disconnect
SQLSTATE==
SQLCODE=0=
sqlca.sqlcode=0=

>>
? delete pza20sc.c 
<<
~
>>
? delete pza20sc.o 
<<
~
>>
? delete pza20sc.obj 
<<
~
>>
? delete pza20sc.exe 
<<
~
>>


Ending at: Thu Mar 30 14:18:50 1995
